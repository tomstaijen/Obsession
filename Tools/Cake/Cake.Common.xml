<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cake.Common</name>
    </assembly>
    <members>
        <member name="T:Cake.Common.Build.AppVeyor.Data.AppVeyorEnvironmentInfo">
            <summary>
            Provides AppVeyor environment information for a current build.
            </summary>
        </member>
        <member name="T:Cake.Common.Build.AppVeyor.AppVeyorInfo">
            <summary>
            Base class used to provide information about the AppVeyor environment.
            </summary>
        </member>
        <member name="M:Cake.Common.Build.AppVeyor.AppVeyorInfo.#ctor(Cake.Core.ICakeEnvironment)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Build.AppVeyor.AppVeyorInfo"/> class.
            </summary>
            <param name="environment">The environment.</param>
        </member>
        <member name="M:Cake.Common.Build.AppVeyor.AppVeyorInfo.GetEnvironmentString(System.String)">
            <summary>
            Gets an environment variable as a <see cref="T:System.String"/>.
            </summary>
            <param name="variable">The environment variable name.</param>
            <returns>The environment variable.</returns>
        </member>
        <member name="M:Cake.Common.Build.AppVeyor.AppVeyorInfo.GetEnvironmentInteger(System.String)">
            <summary>
            Gets an environment variable as a <see cref="T:System.Int32"/>.
            </summary>
            <param name="variable">The environment variable name.</param>
            <returns>The environment variable.</returns>
        </member>
        <member name="M:Cake.Common.Build.AppVeyor.AppVeyorInfo.GetEnvironmentBoolean(System.String)">
            <summary>
            Gets an environment variable as a <see cref="T:System.Boolean"/>.
            </summary>
            <param name="variable">The environment variable name.</param>
            <returns>The environment variable.</returns>
        </member>
        <member name="M:Cake.Common.Build.AppVeyor.Data.AppVeyorEnvironmentInfo.#ctor(Cake.Core.ICakeEnvironment)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Build.AppVeyor.Data.AppVeyorEnvironmentInfo"/> class.
            </summary>
            <param name="environment">The environment.</param>
        </member>
        <member name="P:Cake.Common.Build.AppVeyor.Data.AppVeyorEnvironmentInfo.ApiUrl">
            <summary>
            Gets the AppVeyor build agent API URL.
            </summary>
            <value>
              The AppVeyor build agent API URL.
            </value>
        </member>
        <member name="P:Cake.Common.Build.AppVeyor.Data.AppVeyorEnvironmentInfo.JobId">
            <summary>
            Gets the AppVeyor unique job ID.
            </summary>
            <value>
              The AppVeyor unique job ID.
            </value>
        </member>
        <member name="P:Cake.Common.Build.AppVeyor.Data.AppVeyorEnvironmentInfo.ScheduledBuild">
            <summary>
            Gets a value indicating whether the build runs by scheduler.
            </summary>
            <value>
              <c>true</c> if the build runs by scheduler; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cake.Common.Build.AppVeyor.Data.AppVeyorEnvironmentInfo.Platform">
            <summary>
            Gets the platform name set on build tab of project settings (or through platform parameter in appveyor.yml).
            </summary>
            <value>
              The platform name set on build tab of project settings (or through platform parameter in appveyor.yml).
            </value>
        </member>
        <member name="P:Cake.Common.Build.AppVeyor.Data.AppVeyorEnvironmentInfo.Configuration">
            <summary>
            Gets the configuration name set on build tab of project settings (or through configuration parameter in appveyor.yml).
            </summary>
            <value>
              The configuration name set on build tab of project settings (or through configuration parameter in appveyor.yml).
            </value>
        </member>
        <member name="P:Cake.Common.Build.AppVeyor.Data.AppVeyorEnvironmentInfo.Project">
            <summary>
            Gets AppVeyor project information.
            </summary>
            <value>
              The AppVeyor project information.
            </value>
        </member>
        <member name="P:Cake.Common.Build.AppVeyor.Data.AppVeyorEnvironmentInfo.Build">
            <summary>
            Gets AppVeyor build information.
            </summary>
            <value>
              The AppVeyor build information.
            </value>
        </member>
        <member name="P:Cake.Common.Build.AppVeyor.Data.AppVeyorEnvironmentInfo.PullRequest">
            <summary>
            Gets AppVeyor pull request information.
            </summary>
            <value>
              The AppVeyor pull request information.
            </value>
        </member>
        <member name="P:Cake.Common.Build.AppVeyor.Data.AppVeyorEnvironmentInfo.Repository">
            <summary>
            Gets AppVeyor repository information.
            </summary>
            <value>
              The AppVeyor repository information.
            </value>
        </member>
        <member name="T:Cake.Common.Build.AppVeyor.AppVeyorProvider">
            <summary>
            Responsible for communicating with AppVeyor.
            </summary>
        </member>
        <member name="T:Cake.Common.Build.AppVeyor.IAppVeyorProvider">
            <summary>
            Represents a service that communicates with AppVeyor.
            </summary>
        </member>
        <member name="M:Cake.Common.Build.AppVeyor.IAppVeyorProvider.UploadArtifact(Cake.Core.IO.FilePath)">
            <summary>
            Uploads an AppVeyor artifact.
            </summary>
            <param name="path">The file path of the artifact to upload.</param>
        </member>
        <member name="P:Cake.Common.Build.AppVeyor.IAppVeyorProvider.IsRunningOnAppVeyor">
            <summary>
            Gets a value indicating whether the current build is running on AppVeyor.
            </summary>
            <value>
            <c>true</c> if the current build is running on AppVeyor.; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cake.Common.Build.AppVeyor.IAppVeyorProvider.Environment">
            <summary>
            Gets the AppVeyor environment.
            </summary>
            <value>
            The AppVeyor environment.
            </value>
        </member>
        <member name="M:Cake.Common.Build.AppVeyor.AppVeyorProvider.#ctor(Cake.Core.ICakeEnvironment,Cake.Core.IO.IProcessRunner)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Build.AppVeyor.AppVeyorProvider"/> class.
            </summary>
            <param name="environment">The environment.</param>
            <param name="processRunner">The process runner.</param>
        </member>
        <member name="M:Cake.Common.Build.AppVeyor.AppVeyorProvider.UploadArtifact(Cake.Core.IO.FilePath)">
            <summary>
            Uploads an AppVeyor artifact.
            </summary>
            <param name="path">The file path of the artifact to upload.</param>
        </member>
        <member name="M:Cake.Common.Build.AppVeyor.AppVeyorProvider.UpdateBuildVersion(System.String)">
            <summary>
            Updates the build version.
            </summary>
            <param name="version">The new build version.</param>
        </member>
        <member name="P:Cake.Common.Build.AppVeyor.AppVeyorProvider.IsRunningOnAppVeyor">
            <summary>
            Gets a value indicating whether the current build is running on AppVeyor.
            </summary>
            <value>
            <c>true</c> if the current build is running on AppVeyor.; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cake.Common.Build.AppVeyor.AppVeyorProvider.Environment">
            <summary>
            Gets the AppVeyor environment.
            </summary>
            <value>
            The AppVeyor environment.
            </value>
        </member>
        <member name="T:Cake.Common.Build.AppVeyor.Data.AppVeyorBuildInfo">
            <summary>
            Provides AppVeyor build information for a current build.
            </summary>
        </member>
        <member name="M:Cake.Common.Build.AppVeyor.Data.AppVeyorBuildInfo.#ctor(Cake.Core.ICakeEnvironment)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Build.AppVeyor.Data.AppVeyorBuildInfo"/> class.
            </summary>
            <param name="environment">The environment.</param>
        </member>
        <member name="P:Cake.Common.Build.AppVeyor.Data.AppVeyorBuildInfo.Folder">
            <summary>
            Gets the path to the clone directory.
            </summary>
            <value>
            The path to the clone directory.
            </value>
        </member>
        <member name="P:Cake.Common.Build.AppVeyor.Data.AppVeyorBuildInfo.Id">
            <summary>
            Gets the AppVeyor unique build ID.
            </summary>
            <value>
            The AppVeyor unique build ID.
            </value>
        </member>
        <member name="P:Cake.Common.Build.AppVeyor.Data.AppVeyorBuildInfo.Number">
            <summary>
            Gets the build number.
            </summary>
            <value>
            The build number.
            </value>
        </member>
        <member name="P:Cake.Common.Build.AppVeyor.Data.AppVeyorBuildInfo.Version">
            <summary>
            Gets the build version.
            </summary>
            <value>
            The build version.
            </value>
        </member>
        <member name="T:Cake.Common.Build.AppVeyor.Data.AppVeyorCommitInfo">
            <summary>
            Provides AppVeyor commit information for a current build.
            </summary>
        </member>
        <member name="M:Cake.Common.Build.AppVeyor.Data.AppVeyorCommitInfo.#ctor(Cake.Core.ICakeEnvironment)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Build.AppVeyor.Data.AppVeyorCommitInfo"/> class.
            </summary>
            <param name="environment">The environment.</param>
        </member>
        <member name="P:Cake.Common.Build.AppVeyor.Data.AppVeyorCommitInfo.Id">
            <summary>
            Gets commit ID (SHA).
            </summary>
            <value>
              The commit ID (SHA).
            </value>
        </member>
        <member name="P:Cake.Common.Build.AppVeyor.Data.AppVeyorCommitInfo.Author">
            <summary>
            Gets the commit author's name.
            </summary>
            <value>
              The commit author's name.
            </value>
        </member>
        <member name="P:Cake.Common.Build.AppVeyor.Data.AppVeyorCommitInfo.Email">
            <summary>
            Gets the commit author's email address.
            </summary>
            <value>
              The commit author's email address.
            </value>
        </member>
        <member name="P:Cake.Common.Build.AppVeyor.Data.AppVeyorCommitInfo.Timestamp">
            <summary>
            Gets the commit date/time.
            </summary>
            <value>
              The commit date/time.
            </value>
        </member>
        <member name="P:Cake.Common.Build.AppVeyor.Data.AppVeyorCommitInfo.Message">
            <summary>
            Gets the commit message.
            </summary>
            <value>
              The commit message.
            </value>
        </member>
        <member name="P:Cake.Common.Build.AppVeyor.Data.AppVeyorCommitInfo.ExtendedMessage">
            <summary>
            Gets the rest of commit message after line break (if exists).
            </summary>
            <value>
              The rest of commit message after line break (if exists).
            </value>
        </member>
        <member name="T:Cake.Common.Build.AppVeyor.Data.AppVeyorProjectInfo">
            <summary>
            Provides AppVeyor project information for a current build.
            </summary>
        </member>
        <member name="M:Cake.Common.Build.AppVeyor.Data.AppVeyorProjectInfo.#ctor(Cake.Core.ICakeEnvironment)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Build.AppVeyor.Data.AppVeyorProjectInfo"/> class.
            </summary>
            <param name="environment">The environment.</param>
        </member>
        <member name="P:Cake.Common.Build.AppVeyor.Data.AppVeyorProjectInfo.Id">
            <summary>
            Gets the AppVeyor unique project ID.
            </summary>
            <value>
            The AppVeyor unique project ID.
            </value>
        </member>
        <member name="P:Cake.Common.Build.AppVeyor.Data.AppVeyorProjectInfo.Name">
            <summary>
            Gets the project name.
            </summary>
            <value>
            The project name.
            </value>
        </member>
        <member name="P:Cake.Common.Build.AppVeyor.Data.AppVeyorProjectInfo.Slug">
            <summary>
            Gets the project slug (as seen in project details URL).
            </summary>
            <value>
            The project slug (as seen in project details URL).
            </value>
        </member>
        <member name="T:Cake.Common.Build.AppVeyor.Data.AppVeyorPullRequestInfo">
            <summary>
            Provides AppVeyor pull request information for a current build.
            </summary>
        </member>
        <member name="M:Cake.Common.Build.AppVeyor.Data.AppVeyorPullRequestInfo.#ctor(Cake.Core.ICakeEnvironment)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Build.AppVeyor.Data.AppVeyorPullRequestInfo"/> class.
            </summary>
            <param name="environment">The environment.</param>
        </member>
        <member name="P:Cake.Common.Build.AppVeyor.Data.AppVeyorPullRequestInfo.IsPullRequest">
            <summary>
            Gets a value indicating whether the current build was started by a pull request.
            </summary>
            <value>
              <c>true</c> if the current build was started by a pull request; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cake.Common.Build.AppVeyor.Data.AppVeyorPullRequestInfo.Number">
            <summary>
            Gets the GitHub pull request number.
            </summary>
            <value>
              The GitHub pull request number.
            </value>
        </member>
        <member name="P:Cake.Common.Build.AppVeyor.Data.AppVeyorPullRequestInfo.Title">
            <summary>
            Gets the GitHub pull request title.
            </summary>
            <value>
              The GitHub pull request title.
            </value>
        </member>
        <member name="T:Cake.Common.Build.AppVeyor.Data.AppVeyorRepositoryInfo">
            <summary>
            Provides AppVeyor repository information for a current build.
            </summary>
        </member>
        <member name="M:Cake.Common.Build.AppVeyor.Data.AppVeyorRepositoryInfo.#ctor(Cake.Core.ICakeEnvironment)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Build.AppVeyor.Data.AppVeyorRepositoryInfo"/> class.
            </summary>
            <param name="environment">The environment.</param>
        </member>
        <member name="P:Cake.Common.Build.AppVeyor.Data.AppVeyorRepositoryInfo.Provider">
            <summary>
            Gets the repository provider.
            <list type="bullet">
              <item> 
                <description>github</description> 
              </item> 
              <item> 
                <description>bitbucket</description> 
              </item>
              <item> 
                <description>kiln</description> 
              </item>
            </list> 
            </summary> 
            <value>
              The repository provider.
            </value>
        </member>
        <member name="P:Cake.Common.Build.AppVeyor.Data.AppVeyorRepositoryInfo.Scm">
            <summary>
            Gets the revision control system.
            <list type="bullet">
              <item> 
                <description>git</description> 
              </item> 
              <item> 
                <description>mercurial</description> 
              </item>
            </list> 
            </summary>
            <value>
              The revision control system.
            </value>
        </member>
        <member name="P:Cake.Common.Build.AppVeyor.Data.AppVeyorRepositoryInfo.Name">
            <summary>
            Gets the repository name in format owner-name/repo-name.
            </summary>
            <value>
              The repository name.
            </value>
        </member>
        <member name="P:Cake.Common.Build.AppVeyor.Data.AppVeyorRepositoryInfo.Branch">
            <summary>
            Gets the build branch. For pull request commits it is base branch PR is merging into.
            </summary>
            <value>
              The build branch.
            </value>
        </member>
        <member name="P:Cake.Common.Build.AppVeyor.Data.AppVeyorRepositoryInfo.Tag">
            <summary>
            Gets the tag information for the build.
            </summary>
            <value>
              The tag information for the build.
            </value>
        </member>
        <member name="P:Cake.Common.Build.AppVeyor.Data.AppVeyorRepositoryInfo.Commit">
            <summary>
            Gets the commit information for the build.
            </summary>
            <value>
              The commit information for the build.
            </value>
        </member>
        <member name="T:Cake.Common.Build.AppVeyor.Data.AppVeyorTagInfo">
            <summary>
            Provides AppVeyor tag information for a current build.
            </summary>
        </member>
        <member name="M:Cake.Common.Build.AppVeyor.Data.AppVeyorTagInfo.#ctor(Cake.Core.ICakeEnvironment)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Build.AppVeyor.Data.AppVeyorTagInfo"/> class.
            </summary>
            <param name="environment">The environment.</param>
        </member>
        <member name="P:Cake.Common.Build.AppVeyor.Data.AppVeyorTagInfo.IsTag">
            <summary>
            Gets a value indicating whether build was started by pushed tag.
            </summary>
            <value>
              <c>true</c> if build was started by pushed tag; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cake.Common.Build.AppVeyor.Data.AppVeyorTagInfo.Name">
            <summary>
            Gets the name for builds started by tag; otherwise this variable is undefined.
            </summary>
            <value>
              The name of the tag.
            </value>
        </member>
        <member name="T:Cake.Common.Build.BuildSystem">
            <summary>
            Provides functionality for interacting with
            different build systems.
            </summary>
        </member>
        <member name="M:Cake.Common.Build.BuildSystem.#ctor(Cake.Common.Build.AppVeyor.IAppVeyorProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Build.BuildSystem"/> class.
            </summary>
            <param name="appVeyorProvider">The AppVeyor service.</param>
        </member>
        <member name="P:Cake.Common.Build.BuildSystem.IsRunningOnAppVeyor">
            <summary>
            Gets a value indicating whether the current build is running on AppVeyor.
            </summary>
            <example>
            <code>
            if(BuildSystem.IsRunningOnAppVeyor)
            {
                // Upload artifact to AppVeyor.
                AppVeyor.UploadArtifact("./build/release_x86.zip");
            }
            </code>
            </example>
            <value>
            <c>true</c> if the build currently is running on AppVeyor; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cake.Common.Build.BuildSystem.IsLocalBuild">
             <summary>
             Gets a value indicating whether the current build is local build.
             </summary>
             <example>
             <code>
             // Get a flag telling us if this is a local build or not.
             var isLocal = BuildSystem.IsLocalBuild;
            
             // Define a task that only runs locally.
             Task("LocalOnly")
               .WithCriteria(isLocal)
               .Does(() =>
             {
             });
             </code>
             </example>
             <value>
               <c>true</c> if the current build is local build; otherwise, <c>false</c>.
             </value>
        </member>
        <member name="T:Cake.Common.Build.BuildSystemAliases">
            <summary>
            Contains functionality related to build systems.
            </summary>
        </member>
        <member name="M:Cake.Common.Build.BuildSystemAliases.BuildSystem(Cake.Core.ICakeContext)">
            <summary>
            Gets a <see cref="T:Cake.Common.Build.BuildSystem"/> instance that can
            be used to query for information about the current build system.
            </summary>
            <example>
            <code>
            var isLocal = BuildSystem.IsLocalBuild;
            </code>
            </example>
            <param name="context">The context.</param>
            <returns>A <see cref="T:Cake.Common.Build.BuildSystem"/> instance.</returns>
        </member>
        <member name="M:Cake.Common.Build.BuildSystemAliases.AppVeyor(Cake.Core.ICakeContext)">
            <summary>
            Gets a <see cref="T:Cake.Common.Build.AppVeyor.AppVeyorProvider"/> instance that can
            be used to manipulate the AppVeyor environment.
            </summary>
            <example>
            <code>
            var isAppVeyorBuild = AppVeyor.IsRunningOnAppVeyor;
            </code>
            </example>
            <param name="context">The context.</param>
            <returns>A <see cref="N:Cake.Common.Build.AppVeyor"/> instance.</returns>
        </member>
        <member name="T:Cake.Common.IO.Paths.ConvertableDirectoryPath">
            <summary>
            Represents a <see cref="T:Cake.Core.IO.DirectoryPath"/> that can be easily converted.
            <example>
            To get the underlying <see cref="T:Cake.Core.IO.DirectoryPath"/>:
            <code>
            ConvertableDirectoryPath convertable = Directory("./root");
            DirectoryPath path = (DirectoryPath)convertable;
            </code>
            To combine two directories:
            <code>
            ConvertableDirectoryPath path = Directory("./root") + Directory("other");
            </code>
            To combine a directory with a file:
            <code>
            ConvertableFilePath path = Directory("./root") + File("other.txt");
            </code>
            </example>
            </summary>
        </member>
        <member name="M:Cake.Common.IO.Paths.ConvertableDirectoryPath.#ctor(Cake.Core.IO.DirectoryPath)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.IO.Paths.ConvertableDirectoryPath"/> class.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Cake.Common.IO.Paths.ConvertableDirectoryPath.op_Addition(Cake.Common.IO.Paths.ConvertableDirectoryPath,Cake.Common.IO.Paths.ConvertableDirectoryPath)">
            <summary>
            Operator that combines A <see cref="T:Cake.Common.IO.Paths.ConvertableDirectoryPath"/> instance 
            with another <see cref="T:Cake.Common.IO.Paths.ConvertableDirectoryPath"/> instance.
            </summary>
            <param name="left">The left directory path operand.</param>
            <param name="right">The right directory path operand.</param>
            <returns>A new directory path representing a combination of the two provided paths.</returns>
        </member>
        <member name="M:Cake.Common.IO.Paths.ConvertableDirectoryPath.op_Addition(Cake.Common.IO.Paths.ConvertableDirectoryPath,Cake.Core.IO.DirectoryPath)">
            <summary>
            Operator that combines A <see cref="T:Cake.Common.IO.Paths.ConvertableDirectoryPath"/> instance 
            with a <see cref="T:Cake.Core.IO.DirectoryPath"/> instance.
            </summary>
            <param name="left">The left directory path operand.</param>
            <param name="right">The right directory path operand.</param>
            <returns>A new directory path representing a combination of the two provided paths.</returns>
        </member>
        <member name="M:Cake.Common.IO.Paths.ConvertableDirectoryPath.op_Addition(Cake.Common.IO.Paths.ConvertableDirectoryPath,Cake.Common.IO.Paths.ConvertableFilePath)">
            <summary>
            Operator that combines A <see cref="T:Cake.Common.IO.Paths.ConvertableDirectoryPath"/> instance 
            with a <see cref="T:Cake.Common.IO.Paths.ConvertableFilePath"/> instance.
            </summary>
            <param name="directory">The left directory path operand.</param>
            <param name="file">The right file path operand.</param>
            <returns>A new file path representing a combination of the two provided paths.</returns>
        </member>
        <member name="M:Cake.Common.IO.Paths.ConvertableDirectoryPath.op_Addition(Cake.Common.IO.Paths.ConvertableDirectoryPath,Cake.Core.IO.FilePath)">
            <summary>
            Operator that combines A <see cref="T:Cake.Common.IO.Paths.ConvertableDirectoryPath"/> instance 
            with a <see cref="T:Cake.Core.IO.FilePath"/> instance.
            </summary>
            <param name="directory">The left directory path operand.</param>
            <param name="file">The right file path operand.</param>
            <returns>A new file path representing a combination of the two provided paths.</returns>
        </member>
        <member name="M:Cake.Common.IO.Paths.ConvertableDirectoryPath.op_Implicit(Cake.Common.IO.Paths.ConvertableDirectoryPath)~Cake.Core.IO.DirectoryPath">
            <summary>
            Performs an implicit conversion from <see cref="T:Cake.Common.IO.Paths.ConvertableDirectoryPath"/> to <see cref="T:Cake.Core.IO.DirectoryPath"/>.
            </summary>
            <param name="path">The path.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Cake.Common.IO.Paths.ConvertableDirectoryPath.op_Implicit(Cake.Common.IO.Paths.ConvertableDirectoryPath)~System.String">
            <summary>
            Performs an implicit conversion from <see cref="T:Cake.Common.IO.Paths.ConvertableDirectoryPath"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="path">The path.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Cake.Common.IO.Paths.ConvertableDirectoryPath.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Cake.Common.IO.Paths.ConvertableDirectoryPath.Path">
            <summary>
            Gets the path.
            </summary>
            <value>The path.</value>
        </member>
        <member name="T:Cake.Common.IO.Paths.ConvertableFilePath">
            <summary>
            Represents a <see cref="T:Cake.Core.IO.FilePath"/> that can be easily converted.
            </summary>
        </member>
        <member name="M:Cake.Common.IO.Paths.ConvertableFilePath.#ctor(Cake.Core.IO.FilePath)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.IO.Paths.ConvertableFilePath"/> class.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Cake.Common.IO.Paths.ConvertableFilePath.op_Implicit(Cake.Common.IO.Paths.ConvertableFilePath)~Cake.Core.IO.FilePath">
            <summary>
            Performs an implicit conversion from <see cref="T:Cake.Common.IO.Paths.ConvertableFilePath"/> to <see cref="T:Cake.Core.IO.FilePath"/>.
            </summary>
            <param name="path">The path.</param>
            <returns>The result of the conversion. </returns>
        </member>
        <member name="M:Cake.Common.IO.Paths.ConvertableFilePath.op_Implicit(Cake.Common.IO.Paths.ConvertableFilePath)~System.String">
            <summary>
            Performs an implicit conversion from <see cref="T:Cake.Common.IO.Paths.ConvertableFilePath"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="path">The path.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Cake.Common.IO.Paths.ConvertableFilePath.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Cake.Common.IO.Paths.ConvertableFilePath.Path">
            <summary>
            Gets the path.
            </summary>
            <value>The actual path.</value>
        </member>
        <member name="T:Cake.Common.NamespaceDoc">
            <summary>
            This namespace contain types used for common operations
            such as parsing release notes, retrieving arguments and 
            to read and write environment variables.
            </summary>
        </member>
        <member name="T:Cake.Common.Build.NamespaceDoc">
            <summary>
            This namespace contain types that 
            support different build system related tasks.
            </summary>
        </member>
        <member name="T:Cake.Common.Build.AppVeyor.NamespaceDoc">
            <summary>
            This namespace contain types used
            to interact with AppVeyor.
            </summary>
        </member>
        <member name="T:Cake.Common.Build.AppVeyor.Data.NamespaceDoc">
            <summary>
            This namespace contain types 
            representing data used for interaction with AppVeyor.
            </summary>
        </member>
        <member name="T:Cake.Common.Diagnostics.NamespaceDoc">
            <summary>
            This namespace contain types that 
            enable you to interact with build logs.
            </summary>
        </member>
        <member name="T:Cake.Common.IO.NamespaceDoc">
            <summary>
            This namespace contain types that support input and output, 
            including the ability to read and write data to streams and to
            interact with the file system.
            </summary>
        </member>
        <member name="T:Cake.Common.Solution.NamespaceDoc">
            <summary>
            This namespace contain types that 
            support interaction with MSBuild solution files.
            </summary>
        </member>
        <member name="T:Cake.Common.Solution.Project.NamespaceDoc">
            <summary>
            This namespace contain types that 
            support interaction with MSBuild project files.
            </summary>
        </member>
        <member name="T:Cake.Common.Solution.Project.Properties.NamespaceDoc">
            <summary>
            This namespace contain types that 
            enable you to read or create assembly information files.
            </summary>
        </member>
        <member name="T:Cake.Common.Solution.Project.XmlDoc.NamespaceDoc">
            <summary>
            This namespace contain types that 
            enable you to read XML documentation comments.
            </summary>
        </member>
        <member name="T:Cake.Common.Text.NamespaceDoc">
            <summary>
            This namespace contain types for
            text templating and transformations.
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.NamespaceDoc">
            <summary>
            This namespace contain types used to interact 
            with different third party tools.
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.Cake.NamespaceDoc">
            <summary>
            This namespace contain types used to interact with Cake.
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.ILMerge.NamespaceDoc">
            <summary>
            This namespace contain types used to interact with ILMerge.
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.MSBuild.NamespaceDoc">
            <summary>
            This namespace contain types used to interact with MSBuild.
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.MSTest.NamespaceDoc">
            <summary>
            This namespace contain types used to interact with MSTest.
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.NuGet.NamespaceDoc">
            <summary>
            This namespace contain types used to interact with NuGet.
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.NuGet.Install.NamespaceDoc">
            <summary>
            This namespace contain types used to interact 
            with the NuGet package installer.
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.NuGet.Pack.NamespaceDoc">
            <summary>
            This namespace contain types used to 
            pack NuGet packages.
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.NuGet.Push.NamespaceDoc">
            <summary>
            This namespace contain types used to 
            push NuGet packages.
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.NuGet.Restore.NamespaceDoc">
            <summary>
            This namespace contain types used to 
            restore NuGet packages.
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.NuGet.Sources.NamespaceDoc">
            <summary>
            This namespace contain types used to 
            interact with NuGet sources.
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.NUnit.NamespaceDoc">
            <summary>
            This namespace contain types used to interact with NUnit.
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.SignTool.NamespaceDoc">
            <summary>
            This namespace contain types used for 
            signing assemblies with SignTool.
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.WiX.NamespaceDoc">
            <summary>
            This namespace contain types used to interact with WiX.
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.XUnit.NamespaceDoc">
            <summary>
            This namespace contain types used to interact with XUnit.
            </summary>
        </member>
        <member name="T:Cake.Common.Security.HashAlgorithm">
            <summary>
            The hash algorithm to use for a specific operation.
            </summary>
        </member>
        <member name="F:Cake.Common.Security.HashAlgorithm.MD5">
            <summary>
            The MD5 hash algorithm.
            </summary>
        </member>
        <member name="F:Cake.Common.Security.HashAlgorithm.SHA256">
            <summary>
            The SHA256 hash algorithm.
            </summary>
        </member>
        <member name="F:Cake.Common.Security.HashAlgorithm.SHA512">
            <summary>
            The SHA512 hash algorithm.
            </summary>
        </member>
        <member name="T:Cake.Common.Security.FileHash">
            <summary>
            Represents a calculated file hash.
            </summary>
        </member>
        <member name="M:Cake.Common.Security.FileHash.#ctor(Cake.Core.IO.FilePath,System.Byte[],Cake.Common.Security.HashAlgorithm)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Security.FileHash"/> class.
            </summary>
            <param name="filePath">The file path.</param>
            <param name="hash">The computed hash.</param>
            <param name="hashAlgorithm">The algorithm used.</param>
        </member>
        <member name="M:Cake.Common.Security.FileHash.ToHex">
            <summary>
            Convert the file hash to a hexadecimal string.
            </summary>
            <returns>A hexadecimal string representing the computed hash.</returns>
        </member>
        <member name="P:Cake.Common.Security.FileHash.Algorithm">
            <summary>
            Gets the algorithm used for the hash computation.
            </summary>
        </member>
        <member name="P:Cake.Common.Security.FileHash.Path">
            <summary>
            Gets the <see cref="T:Cake.Core.IO.FilePath"/> for the file.
            </summary>
        </member>
        <member name="P:Cake.Common.Security.FileHash.ComputedHash">
            <summary>
            Gets the raw computed hash.
            </summary>
        </member>
        <member name="T:Cake.Common.Security.FileHashCalculator">
            <summary>
            Represents a file hash operation.
            </summary>
        </member>
        <member name="M:Cake.Common.Security.FileHashCalculator.#ctor(Cake.Core.IO.IFileSystem)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Security.FileHashCalculator"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
        </member>
        <member name="M:Cake.Common.Security.FileHashCalculator.Calculate(Cake.Core.IO.FilePath,Cake.Common.Security.HashAlgorithm)">
            <summary>
            Calculates the hash for a file using the given algorithm.
            </summary>
            <param name="filePath">The file path.</param>
            <param name="hashAlgorithm">The algorithm to use.</param>
            <returns>A <see cref="T:Cake.Common.Security.FileHash"/> instance representing the calculated hash.</returns>
        </member>
        <member name="T:Cake.Common.Security.SecurityAliases">
            <summary>
            Contains security related functionality, such as calculating file
            hashes.
            </summary>
        </member>
        <member name="M:Cake.Common.Security.SecurityAliases.CalculateFileHash(Cake.Core.ICakeContext,Cake.Core.IO.FilePath)">
            <summary>
            Calculates the hash for a given file using the default (SHA256) algorithm.
            </summary>
            <param name="context">The context.</param>
            <param name="filePath">The file path.</param>
            <returns>A <see cref="T:Cake.Common.Security.FileHash"/> instance representing the calculated hash.</returns>
            <example>
            <code>
            Information(
               "Cake executable file SHA256 hash: {0}",
               CalculateFileHash("Cake.exe").ToHex());
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Security.SecurityAliases.CalculateFileHash(Cake.Core.ICakeContext,Cake.Core.IO.FilePath,Cake.Common.Security.HashAlgorithm)">
            <summary>
            Calculates the hash for a given file.
            </summary>
            <param name="context">The context.</param>
            <param name="filePath">The file path.</param>
            <param name="hashAlgorithm">The hash algorithm to use.</param>
            <returns>A <see cref="T:Cake.Common.Security.FileHash"/> instance representing the calculated hash.</returns>
            <example>
            <code>
            Information(
                "Cake executable file MD5 hash: {0}",
                CalculateFileHash("Cake.exe", HashAlgorithm.MD5).ToHex());
            </code>
            </example>
        </member>
        <member name="T:Cake.Common.Solution.Project.ProjectAliases">
            <summary>
            Contains functionality related to MSBuild project files.
            </summary>
        </member>
        <member name="M:Cake.Common.Solution.Project.ProjectAliases.ParseProject(Cake.Core.ICakeContext,Cake.Core.IO.FilePath)">
            <summary>
            Parses project information from project file
            </summary>
            <param name="context">The context.</param>
            <param name="projectPath">The project file path.</param>
            <returns>A parsed project.</returns>
            <example>
            <code>
            var parsedProject = ParseProject("./src/Cake/Cake.csproj");
            Information(
                @"    Parsed project file:
                Configuration         : {0}
                Platform              : {1}
                OutputType            : {2}
                RootNameSpace         : {3}
                AssemblyName          : {4}
                TargetFrameworkVersion: {5}
                Files                 : {6}",
                parsedProject.Configuration,
                parsedProject.Platform,
                parsedProject.OutputType,
                parsedProject.RootNameSpace,
                parsedProject.AssemblyName,
                parsedProject.TargetFrameworkVersion,
                string.Concat(
                    parsedProject
                        .Files
                        .Select(
                            file=>  string.Format(
                                        "\r\n            {0}",
                                        file.FilePath
                                    )
                        )
                )
            );
            </code>
            </example>
        </member>
        <member name="T:Cake.Common.Solution.Project.ProjectFile">
            <summary>
            Represents a MSBuild project file.
            </summary>
        </member>
        <member name="P:Cake.Common.Solution.Project.ProjectFile.FilePath">
            <summary>
            Gets or sets the project file path.
            </summary>
            <value>The project file path.</value>
        </member>
        <member name="P:Cake.Common.Solution.Project.ProjectFile.RelativePath">
            <summary>
            Gets or sets the relative path to the project file.
            </summary>
            <value>
            The relative path to the project file.
            </value>
        </member>
        <member name="P:Cake.Common.Solution.Project.ProjectFile.Compile">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Cake.Common.Solution.Project.ProjectFile"/> is compiled.
            </summary>
            <value>
              <c>true</c> if compiled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Cake.Common.Solution.Project.ProjectParser">
            <summary>
            The MSBuild project file parser.
            </summary>
        </member>
        <member name="M:Cake.Common.Solution.Project.ProjectParser.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Solution.Project.ProjectParser"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The environment.</param>
        </member>
        <member name="M:Cake.Common.Solution.Project.ProjectParser.Parse(Cake.Core.IO.FilePath)">
            <summary>
            Parses a project file.
            </summary>
            <param name="projectPath">The project path.</param>
            <returns>The parsed project.</returns>
        </member>
        <member name="T:Cake.Common.Solution.Project.ProjectParserResult">
            <summary>
            Represents the content in an MSBuild project file.
            </summary>
        </member>
        <member name="M:Cake.Common.Solution.Project.ProjectParserResult.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Cake.Common.Solution.Project.ProjectFile})">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Solution.Project.ProjectParserResult"/> class.
            </summary>
            <param name="configuration">The build configuration.</param>
            <param name="platform">The target platform.</param>
            <param name="projectGuid">The unique project identifier.</param>
            <param name="outputType">The compiler output type.</param>
            <param name="rootNameSpace">The default root namespace.</param>
            <param name="assemblyName">Gets the build target assembly name.</param>
            <param name="targetFrameworkVersion">The compiler framework version.</param>
            <param name="files">The project content files.</param>
        </member>
        <member name="P:Cake.Common.Solution.Project.ProjectParserResult.Configuration">
            <summary>
            Gets the build configuration.
            </summary>
            <value>The build configuration.</value>
        </member>
        <member name="P:Cake.Common.Solution.Project.ProjectParserResult.Platform">
            <summary>
            Gets the target platform.
            </summary>
            <value>The platform.</value>
        </member>
        <member name="P:Cake.Common.Solution.Project.ProjectParserResult.ProjectGuid">
            <summary>
            Gets the unique project identifier.
            </summary>
            <value>The unique project identifier.</value>
        </member>
        <member name="P:Cake.Common.Solution.Project.ProjectParserResult.OutputType">
            <summary>
            Gets the compiler output type, i.e. <c>Exe/Library</c>.
            </summary>
            <value>The output type.</value>
        </member>
        <member name="P:Cake.Common.Solution.Project.ProjectParserResult.RootNameSpace">
            <summary>
            Gets the default root namespace.
            </summary>
            <value>The root namespace.</value>
        </member>
        <member name="P:Cake.Common.Solution.Project.ProjectParserResult.AssemblyName">
            <summary>
            Gets the build target assembly name.
            </summary>
            <value>The assembly name.</value>
        </member>
        <member name="P:Cake.Common.Solution.Project.ProjectParserResult.TargetFrameworkVersion">
            <summary>
            Gets the compiler target framework version.
            </summary>
            <value>The target framework version.</value>
        </member>
        <member name="P:Cake.Common.Solution.Project.ProjectParserResult.Files">
            <summary>
            Gets the project content files.
            </summary>
            <value>The files.</value>
        </member>
        <member name="T:Cake.Common.Solution.Project.ProjectXElement">
            <summary>
            MSBuild Project Xml Element XNames
            </summary>
        </member>
        <member name="F:Cake.Common.Solution.Project.ProjectXElement.Project">
            <summary>
            Project root element
            </summary>
        </member>
        <member name="F:Cake.Common.Solution.Project.ProjectXElement.ItemGroup">
            <summary>
            Item group element
            </summary>
        </member>
        <member name="F:Cake.Common.Solution.Project.ProjectXElement.Reference">
            <summary>
            Assembly reference element
            </summary>
        </member>
        <member name="F:Cake.Common.Solution.Project.ProjectXElement.Import">
            <summary>
            Namespace import element
            </summary>
        </member>
        <member name="F:Cake.Common.Solution.Project.ProjectXElement.Compile">
            <summary>
            Namespace compile element
            </summary>
        </member>
        <member name="F:Cake.Common.Solution.Project.ProjectXElement.PropertyGroup">
            <summary>
            Namespace property group element
            </summary>
        </member>
        <member name="F:Cake.Common.Solution.Project.ProjectXElement.RootNamespace">
            <summary>
            Namespace root namespace element
            </summary>
        </member>
        <member name="F:Cake.Common.Solution.Project.ProjectXElement.OutputType">
            <summary>
            Namespace output type element
            </summary>
        </member>
        <member name="F:Cake.Common.Solution.Project.ProjectXElement.AssemblyName">
            <summary>
            Namespace assembly name element
            </summary>
        </member>
        <member name="F:Cake.Common.Solution.Project.ProjectXElement.TargetFrameworkVersion">
            <summary>
            Gets the namespace for the target framework version element.
            </summary>
        </member>
        <member name="F:Cake.Common.Solution.Project.ProjectXElement.Configuration">
            <summary>
            Gets the namespace for the configuration element.
            </summary>
        </member>
        <member name="F:Cake.Common.Solution.Project.ProjectXElement.Platform">
            <summary>
             Gets the namespace for the platform element.
            </summary>
        </member>
        <member name="F:Cake.Common.Solution.Project.ProjectXElement.ProjectGuid">
            <summary>
            Gets the namespace for the project GUID.
            </summary>
        </member>
        <member name="F:Cake.Common.Solution.Project.ProjectXElement.BootstrapperPackage">
            <summary>
            Gets the namespace for the bootstrapper package element.
            </summary>
        </member>
        <member name="F:Cake.Common.Solution.Project.ProjectXElement.ProjectReference">
            <summary>
            Gets the namespace for the project reference element.
            </summary>
        </member>
        <member name="F:Cake.Common.Solution.Project.ProjectXElement.Service">
            <summary>
            Gets the namespace for the service element.
            </summary>
        </member>
        <member name="T:Cake.Common.Solution.Project.Properties.AssemblyInfoCreator">
            <summary>
            The assembly info creator.
            </summary>
        </member>
        <member name="M:Cake.Common.Solution.Project.Properties.AssemblyInfoCreator.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,Cake.Core.Diagnostics.ICakeLog)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Solution.Project.Properties.AssemblyInfoCreator"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The environment.</param>
            <param name="log">The log.</param>
        </member>
        <member name="M:Cake.Common.Solution.Project.Properties.AssemblyInfoCreator.Create(Cake.Core.IO.FilePath,Cake.Common.Solution.Project.Properties.AssemblyInfoSettings)">
            <summary>
            Creates an assembly info file.
            </summary>
            <param name="outputPath">The output path.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="T:Cake.Common.Solution.Project.Properties.AssemblyInfoAliases">
            <summary>
            Contains functionality related to assembly info.
            </summary>
        </member>
        <member name="M:Cake.Common.Solution.Project.Properties.AssemblyInfoAliases.CreateAssemblyInfo(Cake.Core.ICakeContext,Cake.Core.IO.FilePath,Cake.Common.Solution.Project.Properties.AssemblyInfoSettings)">
            <summary>
            Creates an assembly information file.
            </summary>
            <param name="context">The context.</param>
            <param name="outputPath">The output path.</param>
            <param name="settings">The settings.</param>
            <example>
            <code>
            var file = "./SolutionInfo.cs";
            var version = "0.0.1";
            var buildNo = "123";
            var semVersion = string.Concat(version + "-" + buildNo);
            CreateAssemblyInfo(file, new AssemblyInfoSettings {
                Product = "SampleProject",
                Version = version,
                FileVersion = version,
                InformationalVersion = semVersion,
                Copyright = string.Format("Copyright (c) Contoso 2014 - {0}", DateTime.Now.Year)
            });
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Solution.Project.Properties.AssemblyInfoAliases.ParseAssemblyInfo(Cake.Core.ICakeContext,Cake.Core.IO.FilePath)">
            <summary>
            Parses an existing assembly information file.
            </summary>
            <param name="context">The context.</param>
            <param name="assemblyInfoPath">The assembly info path.</param>
            <returns>The content of the assembly info file.</returns>
            <example>
            <code>
            var assemblyInfo = ParseAssemblyInfo("./SolutionInfo.cs");
            Information("Version: {0}", assemblyInfo.AssemblyVersion);
            Information("File version: {0}", assemblyInfo.AssemblyFileVersion);
            Information("Informational version: {0}", assemblyInfo.AssemblyInformationalVersion);
            </code>
            </example>
        </member>
        <member name="T:Cake.Common.Solution.Project.Properties.AssemblyInfoParser">
            <summary>
            The assembly info parser.
            </summary>
        </member>
        <member name="M:Cake.Common.Solution.Project.Properties.AssemblyInfoParser.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Solution.Project.Properties.AssemblyInfoParser"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The environment.</param>
        </member>
        <member name="M:Cake.Common.Solution.Project.Properties.AssemblyInfoParser.Parse(Cake.Core.IO.FilePath)">
            <summary>
            Parses information from an assembly info file.
            </summary>
            <param name="assemblyInfoPath">The file path.</param>
            <returns>Information about the assembly info content.</returns>
        </member>
        <member name="T:Cake.Common.Solution.Project.Properties.AssemblyInfoParseResult">
            <summary>
            Represents the content in an assembly info file.
            </summary>
        </member>
        <member name="M:Cake.Common.Solution.Project.Properties.AssemblyInfoParseResult.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Solution.Project.Properties.AssemblyInfoParseResult"/> class.
            </summary>
            <param name="assemblyVersion">The assembly version.</param>
            <param name="assemblyFileVersion">The assembly file version.</param>
            <param name="assemblyInformationalVersion">The assembly informational version.</param>
        </member>
        <member name="P:Cake.Common.Solution.Project.Properties.AssemblyInfoParseResult.AssemblyVersion">
            <summary>
            Gets the assembly version.
            </summary>
            <value>The assembly version.</value>
        </member>
        <member name="P:Cake.Common.Solution.Project.Properties.AssemblyInfoParseResult.AssemblyFileVersion">
            <summary>
            Gets the assembly file version.
            </summary>
            <value>The assembly file version.</value>
        </member>
        <member name="P:Cake.Common.Solution.Project.Properties.AssemblyInfoParseResult.AssemblyInformationalVersion">
            <summary>
            Gets the assembly informational version.
            </summary>
            <value>The assembly informational version.</value>
        </member>
        <member name="T:Cake.Common.Solution.Project.Properties.AssemblyInfoSettings">
            <summary>
            Contains settings used by <see cref="T:Cake.Common.Solution.Project.Properties.AssemblyInfoCreator"/>.
            </summary>
        </member>
        <member name="P:Cake.Common.Solution.Project.Properties.AssemblyInfoSettings.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>The assembly title.</value>
        </member>
        <member name="P:Cake.Common.Solution.Project.Properties.AssemblyInfoSettings.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>The assembly description.</value>
        </member>
        <member name="P:Cake.Common.Solution.Project.Properties.AssemblyInfoSettings.Guid">
            <summary>
            Gets or sets the unique identifier.
            </summary>
            <value>The unique identifier.</value>
        </member>
        <member name="P:Cake.Common.Solution.Project.Properties.AssemblyInfoSettings.Product">
            <summary>
            Gets or sets the product.
            </summary>
            <value>The assembly product.</value>
        </member>
        <member name="P:Cake.Common.Solution.Project.Properties.AssemblyInfoSettings.Copyright">
            <summary>
            Gets or sets the copyright.
            </summary>
            <value>The copyright.</value>
        </member>
        <member name="P:Cake.Common.Solution.Project.Properties.AssemblyInfoSettings.Trademark">
            <summary>
            Gets or sets the trademark.
            </summary>
            <value>The trademark.</value>
        </member>
        <member name="P:Cake.Common.Solution.Project.Properties.AssemblyInfoSettings.Version">
            <summary>
            Gets or sets the version.
            </summary>
            <value>The version.</value>
        </member>
        <member name="P:Cake.Common.Solution.Project.Properties.AssemblyInfoSettings.FileVersion">
            <summary>
            Gets or sets the file version.
            </summary>
            <value>The file version.</value>
        </member>
        <member name="P:Cake.Common.Solution.Project.Properties.AssemblyInfoSettings.InformationalVersion">
            <summary>
            Gets or sets the informational version.
            </summary>
            <value>The informational version.</value>
        </member>
        <member name="P:Cake.Common.Solution.Project.Properties.AssemblyInfoSettings.ComVisible">
            <summary>
            Gets or sets whether or not the assembly is COM visible.
            </summary>
            <value>Whether or not the assembly is COM visible.</value>
        </member>
        <member name="P:Cake.Common.Solution.Project.Properties.AssemblyInfoSettings.CLSCompliant">
            <summary>
            Gets or sets whether or not the assembly is CLS compliant.
            </summary>
            <value>Whether or not the assembly is CLS compliant.</value>
        </member>
        <member name="P:Cake.Common.Solution.Project.Properties.AssemblyInfoSettings.Company">
            <summary>
            Gets or sets the company.
            </summary>
            <value>The company.</value>
        </member>
        <member name="T:Cake.Common.Diagnostics.LoggingAliases">
            <summary>
            Contains functionality related to logging.
            </summary>
        </member>
        <member name="M:Cake.Common.Diagnostics.LoggingAliases.Error(Cake.Core.ICakeContext,System.String,System.Object[])">
            <summary>
            Writes an error message to the log using the specified format information.
            </summary>
            <param name="context">The context.</param>
            <param name="format">The format.</param>
            <param name="args">The arguments.</param>
            <example>
            <code>
            Error("Hello {0}! Today is an {1:dddd}", "World", DateTime.Now);
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Diagnostics.LoggingAliases.Error(Cake.Core.ICakeContext,Cake.Core.Diagnostics.LogAction)">
            <summary>
            Writes an error message to the log using the specified log message action.
            Evaluation message only if verbosity same or more verbose.
            </summary>
            <param name="context">the context.</param>
            <param name="logAction">The function called for message when logging.</param>
            <example>
            <code>
            Error(logAction=>logAction("Hello {0}! Today is an {1:dddd}", "World", DateTime.Now));
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Diagnostics.LoggingAliases.Warning(Cake.Core.ICakeContext,System.String,System.Object[])">
            <summary>
            Writes a warning message to the log using the specified format information.
            </summary>
            <param name="context">The context.</param>
            <param name="format">The format.</param>
            <param name="args">The arguments.</param>
            <example>
            <code>
            Warning("Hello {0}! Today is an {1:dddd}", "World", DateTime.Now);
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Diagnostics.LoggingAliases.Warning(Cake.Core.ICakeContext,Cake.Core.Diagnostics.LogAction)">
            <summary>
            Writes a warning message to the log using the specified log message action.
            Evaluation message only if verbosity same or more verbose.
            </summary>
            <param name="context">the context.</param>
            <param name="logAction">The function called for message when logging.</param>
            <example>
            <code>
            Warning(logAction=>logAction("Hello {0}! Today is an {1:dddd}", "World", DateTime.Now));
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Diagnostics.LoggingAliases.Information(Cake.Core.ICakeContext,System.String,System.Object[])">
            <summary>
            Writes an informational message to the log using the specified format information.
            </summary>
            <param name="context">The context.</param>
            <param name="format">The format.</param>
            <param name="args">The arguments.</param>
            <example>
            <code>
            Information("Hello {0}! Today is an {1:dddd}", "World", DateTime.Now);
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Diagnostics.LoggingAliases.Information(Cake.Core.ICakeContext,Cake.Core.Diagnostics.LogAction)">
            <summary>
            Writes an informational message to the log using the specified log message action.
            Evaluation message only if verbosity same or more verbose.
            </summary>
            <param name="context">the context.</param>
            <param name="logAction">The function called for message when logging.</param>
            <example>
            <code>
            Information(logAction=>logAction("Hello {0}! Today is an {1:dddd}", "World", DateTime.Now));
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Diagnostics.LoggingAliases.Verbose(Cake.Core.ICakeContext,System.String,System.Object[])">
            <summary>
            Writes a verbose message to the log using the specified format information.
            </summary>
            <param name="context">The context.</param>
            <param name="format">The format.</param>
            <param name="args">The arguments.</param>
            <example>
            <code>
            Verbose("Hello {0}! Today is an {1:dddd}", "World", DateTime.Now);
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Diagnostics.LoggingAliases.Verbose(Cake.Core.ICakeContext,Cake.Core.Diagnostics.LogAction)">
            <summary>
            Writes a verbose message to the log using the specified log message action.
            Evaluation message only if verbosity same or more verbose.
            </summary>
            <param name="context">the context.</param>
            <param name="logAction">The function called for message when logging.</param>
            <example>
            <code>
            Verbose(logAction=>logAction("Hello {0}! Today is an {1:dddd}", "World", DateTime.Now));
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Diagnostics.LoggingAliases.Debug(Cake.Core.ICakeContext,System.String,System.Object[])">
            <summary>
            Writes a debug message to the log using the specified format information.
            </summary>
            <param name="context">The context.</param>
            <param name="format">The format.</param>
            <param name="args">The arguments.</param>
            <example>
            <code>
            Debug("Hello {0}! Today is an {1:dddd}", "World", DateTime.Now);
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Diagnostics.LoggingAliases.Debug(Cake.Core.ICakeContext,Cake.Core.Diagnostics.LogAction)">
            <summary>
            Writes a debug message to the log using the specified log message action.
            Evaluation message only if verbosity same or more verbose.
            </summary>
            <param name="context">the context.</param>
            <param name="logAction">The function called for message when logging.</param>
            <example>
            <code>
            Debug(logAction=>logAction("Hello {0}! Today is an {1:dddd}", "World", DateTime.Now));
            </code>
            </example>
        </member>
        <member name="T:Cake.Common.EnvironmentAliases">
            <summary>
            Contains functionality related to the environment.
            </summary>
        </member>
        <member name="M:Cake.Common.EnvironmentAliases.EnvironmentVariable(Cake.Core.ICakeContext,System.String)">
            <summary>
            Retrieves the value of the environment variable or <c>null</c> if the environment variable do not exist.
            </summary>
            <param name="context">The context.</param>
            <param name="variable">The environment variable.</param>
            <returns>The environment variable or <c>null</c> if the environment variable do not exist.</returns>
            <example>
            <code>
            Information("Home directory location: {0}", EnvironmentVariable("HOME") ?? "Unknown location");
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.EnvironmentAliases.HasEnvironmentVariable(Cake.Core.ICakeContext,System.String)">
            <summary>
            Checks for the existence of a value for a given environment variable.
            </summary>
            <param name="context">The context.</param>
            <param name="variable">The environment variable.</param>
            <returns>
              <c>true</c> if the environment variable exist; otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            context
            or
            variable
            </exception>
            <example>
              <code>
            if (HasEnvironmentVariable("ONLY_AVAIL_UNDER_CI"))
            {
            Information("Running under CI");
            }
            else
            {
            Information("Running locally");
            }
            </code>
            </example>
        </member>
        <member name="T:Cake.Common.ProcessAliases">
            <summary>
            Contains functionality related to processes.
            </summary>
        </member>
        <member name="M:Cake.Common.ProcessAliases.StartProcess(Cake.Core.ICakeContext,Cake.Core.IO.FilePath)">
            <summary>
            Starts the process resource that is specified by the filename.
            </summary>
            <param name="context">The context.</param>
            <param name="fileName">The file name.</param>
            <returns>The exit code that the started process specified when it terminated.</returns>
            <example>
            <code>
            var exitCodeWithoutArguments = StartProcess("ping");
            // This should output 1 as argument is missing
            Information("Exit code: {0}", exitCodeWithoutArguments);
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.ProcessAliases.StartProcess(Cake.Core.ICakeContext,Cake.Core.IO.FilePath,Cake.Core.IO.ProcessSettings)">
            <summary>
            Starts the process resource that is specified by the filename and settings.
            </summary>
            <param name="context">The context.</param>
            <param name="fileName">Name of the file.</param>
            <param name="settings">The settings.</param>
            <returns>The exit code that the started process specified when it terminated.</returns>
            <example>
            <code>
            var exitCodeWithArgument = StartProcess("ping", new ProcessSettings{ Arguments = "localhost" });
            // This should output 0 as valid arguments supplied
            Information("Exit code: {0}", exitCodeWithArgument);
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.ProcessAliases.StartProcess(Cake.Core.ICakeContext,Cake.Core.IO.FilePath,Cake.Core.IO.ProcessSettings,System.Collections.Generic.IEnumerable{System.String}@)">
            <summary>
            Starts the process resource that is specified by the filename and settings.
            </summary>
            <param name="context">The context.</param>
            <param name="fileName">Name of the file.</param>
            <param name="settings">The settings.</param>
            <param name="redirectedOutput">outputs process output <see cref="P:Cake.Core.IO.ProcessSettings.RedirectStandardOutput">RedirectStandardOutput</see> is true</param>
            <returns>The exit code that the started process specified when it terminated.</returns>
            <example>
            <code>
            IEnumerable&lt;string&gt; redirectedOutput;
            var exitCodeWithArgument = StartProcess("ping", new ProcessSettings{
            Arguments = "localhost",
            RedirectStandardOutput = true
            },
            out redirectedOutput
            );
            //Output last line of process output
            Information("Last line of output: {0}", redirectedOutput.LastOrDefault());
            
            // This should output 0 as valid arguments supplied
            Information("Exit code: {0}", exitCodeWithArgument);
            </code>
            </example>
        </member>
        <member name="T:Cake.Common.ReleaseNotes">
            <summary>
            Represent release notes.
            </summary>
        </member>
        <member name="M:Cake.Common.ReleaseNotes.#ctor(System.Version,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.ReleaseNotes"/> class.
            </summary>
            <param name="version">The version.</param>
            <param name="notes">The notes.</param>
        </member>
        <member name="P:Cake.Common.ReleaseNotes.Version">
            <summary>
            Gets the version.
            </summary>
            <value>The version.</value>
        </member>
        <member name="P:Cake.Common.ReleaseNotes.Notes">
            <summary>
            Gets the release notes.
            </summary>
            <value>The release notes.</value>
        </member>
        <member name="T:Cake.Common.ReleaseNotesAliases">
            <summary>
            Contains functionality related to release notes.
            </summary>
        </member>
        <member name="M:Cake.Common.ReleaseNotesAliases.ParseAllReleaseNotes(Cake.Core.ICakeContext,Cake.Core.IO.FilePath)">
            <summary>
            Parses all release notes.
            </summary>
            <param name="context">The context.</param>
            <param name="filePath">The file path.</param>
            <returns>All release notes.</returns>
            <example>
            <code>
            var releaseNotes = ParseAllReleaseNotes("./ReleaseNotes.md");
            foreach(var releaseNote in releaseNotes)
            {
                Information("Version: {0}", releaseNote.Version);
                foreach(var note in releaseNote.Notes)
                {
                    Information("\t{0}", note);
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.ReleaseNotesAliases.ParseReleaseNotes(Cake.Core.ICakeContext,Cake.Core.IO.FilePath)">
            <summary>
            Parses the latest release notes.
            </summary>
            <param name="context">The context.</param>
            <param name="filePath">The file path.</param>
            <returns>The latest release notes.</returns>
            <example>
            <code>
            var releaseNote = ParseReleaseNotes("./ReleaseNotes.md");
            Information("Version: {0}", releaseNote.Version);
            foreach(var note in releaseNote.Notes)
            {
                Information("\t{0}", note);
            }
            </code>
            </example>
        </member>
        <member name="T:Cake.Common.ReleaseNotesParser">
            <summary>
            The release notes parser.
            </summary>
        </member>
        <member name="M:Cake.Common.ReleaseNotesParser.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.ReleaseNotesParser"/> class.
            </summary>
        </member>
        <member name="M:Cake.Common.ReleaseNotesParser.Parse(System.String)">
            <summary>
            Parses all release notes.
            </summary>
            <param name="content">The content.</param>
            <returns>All release notes.</returns>
        </member>
        <member name="T:Cake.Common.Solution.Project.XmlDoc.XmlDocExampleCode">
            <summary>
            Parsed Xml documentation example code
            </summary>
        </member>
        <member name="M:Cake.Common.Solution.Project.XmlDoc.XmlDocExampleCode.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Solution.Project.XmlDoc.XmlDocExampleCode"/> class.
            </summary>
            <param name="name">The name of code parent.</param>
            <param name="code">The example code.</param>
        </member>
        <member name="P:Cake.Common.Solution.Project.XmlDoc.XmlDocExampleCode.Name">
            <summary>
            Gets Example code parent name
            </summary>
        </member>
        <member name="P:Cake.Common.Solution.Project.XmlDoc.XmlDocExampleCode.Code">
            <summary>
            Gets Example code
            </summary>
        </member>
        <member name="T:Cake.Common.Solution.Project.XmlDoc.XmlDocExampleCodeParser">
            <summary>
            The MSBuild Xml documentation example code parser
            </summary>
        </member>
        <member name="M:Cake.Common.Solution.Project.XmlDoc.XmlDocExampleCodeParser.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.IO.IGlobber)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Solution.Project.XmlDoc.XmlDocExampleCodeParser"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="globber">The globber.</param>
        </member>
        <member name="M:Cake.Common.Solution.Project.XmlDoc.XmlDocExampleCodeParser.Parse(Cake.Core.IO.FilePath)">
            <summary>
            Parses Xml documentation example code from given path
            </summary>
            <param name="xmlFilePath">Path to the file to parse.</param>
            <returns>Parsed Example Code</returns>
        </member>
        <member name="M:Cake.Common.Solution.Project.XmlDoc.XmlDocExampleCodeParser.ParseFiles(System.String)">
            <summary>
            Parses Xml documentation example code from file(s) using given pattern 
            </summary>
            <param name="pattern">The globber file pattern.</param>
            <returns>Parsed Example Code</returns>
        </member>
        <member name="T:Cake.Common.Solution.Project.XmlDoc.XmlDocAliases">
            <summary>
            Contains functionality related to MSBuild XML document files.
            </summary>
        </member>
        <member name="M:Cake.Common.Solution.Project.XmlDoc.XmlDocAliases.ParseXmlDocExampleCode(Cake.Core.ICakeContext,Cake.Core.IO.FilePath)">
            <summary>
            Parses Xml documentation example code from given path.
            </summary>
            <param name="context">The context.</param>
            <param name="xmlFilePath">The Path to the file to parse.</param>
            <returns>Parsed example code.</returns>
            <example>
            <code>
            var exampleCodes = ParseXmlDocExampleCode("./Cake.Common.xml");
            foreach(var exampleCode in exampleCodes)
            {
                Information(
                    "{0}\r\n{1}",
                    exampleCode.Name,
                    exampleCode.Code
                );
            }
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Solution.Project.XmlDoc.XmlDocAliases.ParseXmlDocFilesExampleCode(Cake.Core.ICakeContext,System.String)">
            <summary>
            Parses Xml documentation example code from file(s) using given pattern.
            </summary>
            <param name="context">The context.</param>
            <param name="pattern">The globber file pattern.</param>
            <returns>Parsed example code.</returns>
            <example>
            <code>
            var filesExampleCodes = ParseXmlDocFilesExampleCode("./Cake.*.xml");
            foreach(var exampleCode in filesExampleCodes)
            {
                Information(
                    "{0}\r\n{1}",
                    exampleCode.Name,
                    exampleCode.Code
                );
            }
            </code>
            </example>
        </member>
        <member name="T:Cake.Common.Solution.SolutionAliases">
            <summary>
            Contains functionality related to MSBuild solution files.
            </summary>
        </member>
        <member name="M:Cake.Common.Solution.SolutionAliases.ParseSolution(Cake.Core.ICakeContext,Cake.Core.IO.FilePath)">
            <summary>
            Parses project information from a solution file.
            </summary>
            <param name="context">The context.</param>
            <param name="solutionPath">The solution path.</param>
            <returns>A parsed solution.</returns>
            <example>
            <code>
            var solutionPath = "./src/Cake.sln";
            Information("Parsing {0}", solutionPath);
            var parsedSolution = ParseSolution(solutionPath);
            foreach(var project in parsedSolution.Projects)
            {
                Information(
                    @"Solution project file:
                Name: {0}
                Path: {1}
                Id  : {2}
                Type: {3}",
                    project.Name,
                    project.Path,
                    project.Id,
                    project.Type
                );
            }
            </code>
            </example>
        </member>
        <member name="T:Cake.Common.Solution.SolutionParser">
            <summary>
            The MSBuild solution file parser.
            </summary>
        </member>
        <member name="M:Cake.Common.Solution.SolutionParser.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Solution.SolutionParser"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The environment.</param>
        </member>
        <member name="M:Cake.Common.Solution.SolutionParser.Parse(Cake.Core.IO.FilePath)">
            <summary>
            Parses a MSBuild solution.
            </summary>
            <param name="solutionPath">The solution path.</param>
            <returns>A parsed solution.</returns>
        </member>
        <member name="T:Cake.Common.Solution.SolutionParserResult">
            <summary>
            Represents the content in an MSBuild solution file.
            </summary>
        </member>
        <member name="M:Cake.Common.Solution.SolutionParserResult.#ctor(System.String,System.String,System.String,System.Collections.Generic.IReadOnlyCollection{Cake.Common.Solution.SolutionProject})">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Solution.SolutionParserResult"/> class.
            </summary>
            <param name="version">The file format version.</param>
            <param name="visualStudioVersion">The version of Visual Studio that created the file.</param>
            <param name="minimumVisualStudioVersion">The minimum supported version of Visual Studio.</param>
            <param name="projects">The solution projects.</param>
        </member>
        <member name="P:Cake.Common.Solution.SolutionParserResult.Version">
            <summary>
            Gets the file format version.
            </summary>
        </member>
        <member name="P:Cake.Common.Solution.SolutionParserResult.VisualStudioVersion">
            <summary>
            Gets the version of Visual Studio that created the file.
            </summary>
        </member>
        <member name="P:Cake.Common.Solution.SolutionParserResult.MinimumVisualStudioVersion">
            <summary>
            Gets the minimum supported version of Visual Studio.
            </summary>
        </member>
        <member name="P:Cake.Common.Solution.SolutionParserResult.Projects">
            <summary>
            Gets all solution projects.
            </summary>
        </member>
        <member name="T:Cake.Common.Solution.SolutionProject">
            <summary>
            Represents a project in a MSBuild solution.
            </summary>
        </member>
        <member name="M:Cake.Common.Solution.SolutionProject.#ctor(System.String,System.String,Cake.Core.IO.FilePath,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Solution.SolutionProject"/> class.
            </summary>
            <param name="id">The project identity.</param>
            <param name="name">The project name.</param>
            <param name="path">The project path.</param>
            <param name="type">The project type identity.</param>
        </member>
        <member name="P:Cake.Common.Solution.SolutionProject.Id">
            <summary>
            Gets the project identity.
            </summary>
        </member>
        <member name="P:Cake.Common.Solution.SolutionProject.Name">
            <summary>
            Gets the project name.
            </summary>
        </member>
        <member name="P:Cake.Common.Solution.SolutionProject.Path">
            <summary>
            Gets the project path.
            </summary>
        </member>
        <member name="P:Cake.Common.Solution.SolutionProject.Type">
            <summary>
            Gets the project type identity.
            </summary>
        </member>
        <member name="T:Cake.Common.Text.TextTransformationAliases">
            <summary>
            Contains functionality related to text transformation.
            </summary>
        </member>
        <member name="M:Cake.Common.Text.TextTransformationAliases.TransformText(Cake.Core.ICakeContext,System.String)">
            <summary>
            Creates a text transformation from the provided template.
            </summary>
            <param name="context">The context.</param>
            <param name="template">The template.</param>
            <returns>A <see cref="T:Cake.Common.Text.TextTransformation`1"/> representing the provided template.</returns>
            <example>  
            This sample shows how to create a <see cref="T:Cake.Common.Text.TextTransformation`1"/> using
            the specified template.
            <code> 
            string text = TransformText("Hello &lt;%subject%&gt;!")
               .WithToken("subject", "world")
               .ToString();
            </code> 
            </example> 
        </member>
        <member name="M:Cake.Common.Text.TextTransformationAliases.TransformText(Cake.Core.ICakeContext,System.String,System.String,System.String)">
            <summary>
            Creates a text transformation from the provided template, using the specified placeholder.
            </summary>
            <param name="context">The context.</param>
            <param name="template">The template.</param>
            <param name="leftPlaceholder">The left placeholder.</param>
            <param name="rightPlaceholder">The right placeholder.</param>
            <returns>A <see cref="T:Cake.Common.Text.TextTransformation`1"/> representing the provided template.</returns>
            <example>  
            This sample shows how to create a <see cref="T:Cake.Common.Text.TextTransformation`1"/> using
            the specified template and placeholder.
            <code> 
            string text = TransformText("Hello {subject}!", "{", "}")
               .WithToken("subject", "world")
               .ToString();
            </code> 
            </example> 
        </member>
        <member name="M:Cake.Common.Text.TextTransformationAliases.TransformTextFile(Cake.Core.ICakeContext,Cake.Core.IO.FilePath)">
            <summary>
            Creates a text transformation from the provided template on disc.
            </summary>
            <param name="context">The context.</param>
            <param name="path">The template file path.</param>
            <returns>A <see cref="T:Cake.Common.Text.TextTransformation`1"/> representing the provided template.</returns>
            <example>  
            This sample shows how to create a <see cref="T:Cake.Common.Text.TextTransformation`1"/> using
            the specified template file with the placeholder format <c>&lt;%key%&gt;</c>.
            <code> 
            string text = TransformTextFile("./template.txt")
               .WithToken("subject", "world")
               .ToString();
            </code> 
            </example> 
        </member>
        <member name="M:Cake.Common.Text.TextTransformationAliases.TransformTextFile(Cake.Core.ICakeContext,Cake.Core.IO.FilePath,System.String,System.String)">
            <summary>
            Creates a text transformation from the provided template on disc, using the specified placeholder.
            </summary>
            <param name="context">The context.</param>
            <param name="path">The template file path.</param>
            <param name="leftPlaceholder">The left placeholder.</param>
            <param name="rightPlaceholder">The right placeholder.</param>
            <returns>A <see cref="T:Cake.Common.Text.TextTransformation`1"/> representing the provided template.</returns>
            <example>  
            This sample shows how to create a <see cref="T:Cake.Common.Text.TextTransformation`1"/> using
            the specified template file and placeholder.
            <code> 
            string text = TransformTextFile("./template.txt", "{", "}")
               .WithToken("subject", "world")
               .ToString();
            </code> 
            </example> 
        </member>
        <member name="T:Cake.Common.Text.TextTransformation`1">
            <summary>
            Provides functionality to perform simple text transformations
            from a Cake build script and save them to disc.
            </summary>
            <typeparam name="TTemplate">The text transformation template.</typeparam>
        </member>
        <member name="M:Cake.Common.Text.TextTransformation`1.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Text.TextTransformation`1"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The environment.</param>
            <param name="template">The text template.</param>
        </member>
        <member name="M:Cake.Common.Text.TextTransformation`1.Save(Cake.Core.IO.FilePath)">
            <summary>
            Saves the text transformation to a file.
            </summary>
            <param name="path">The <see cref="T:Cake.Core.IO.FilePath"/> to save the test transformation to.</param>
        </member>
        <member name="M:Cake.Common.Text.TextTransformation`1.ToString">
            <summary>
            Returns a string containing the rendered template.
            </summary>
            <returns>A string containing the rendered template.</returns>
        </member>
        <member name="P:Cake.Common.Text.TextTransformation`1.Template">
            <summary>
            Gets the text transformation template.
            </summary>
            <value>The text transformation template.</value>
        </member>
        <member name="T:Cake.Common.Text.TextTransformationExtensions">
            <summary>
            Contains extension methods for <see cref="T:Cake.Common.Text.TextTransformation`1"/>.
            </summary>
        </member>
        <member name="M:Cake.Common.Text.TextTransformationExtensions.WithToken``1(Cake.Common.Text.TextTransformation{``0},System.String,System.Object)">
            <summary>
            Registers a key and a value to be used with the
            text transformation.
            </summary>
            <typeparam name="TTemplate">The text transformation template.</typeparam>
            <param name="transformation">The text transformation.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>
            The same <see cref="T:Cake.Common.Text.TextTransformation`1"/> instance so that multiple calls can be chained.
            </returns>
        </member>
        <member name="T:Cake.Common.Tools.Cake.CakeAliases">
            <summary>
            Contains functionality related to running Cake scripts out of process.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.Cake.CakeAliases.CakeExecuteScript(Cake.Core.ICakeContext,Cake.Core.IO.FilePath)">
            <summary>
            Executes cake script out of process
            </summary>
            <param name="context">The context.</param>
            <param name="cakeScriptPath">The script file.</param>
            <example>
            <code>
            CakeExecuteScript("./helloworld.cake");
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Tools.Cake.CakeAliases.CakeExecuteScript(Cake.Core.ICakeContext,Cake.Core.IO.FilePath,Cake.Common.Tools.Cake.CakeSettings)">
            <summary>
            Executes cake script out of process
            </summary>
            <param name="context">The context.</param>
            <param name="cakeScriptPath">The script file.</param>
            <param name="settings">The settings <see cref="T:Cake.Common.Tools.Cake.CakeSettings"/>.</param>
            <example>
            <code>
            CakeExecuteScript("./helloworld.cake", new CakeSettings{ ToolPath="./Cake.exe" });
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Tools.Cake.CakeAliases.CakeExecuteExpression(Cake.Core.ICakeContext,System.String)">
            <summary>
            Executes Cake expression out of process
            </summary>
            <param name="context">The context.</param>
            <param name="cakeExpression">The cake expression</param>
            <example>
            <code>
            CakeExecuteExpression("Information(\"Hello {0}\", \"World\");");
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Tools.Cake.CakeAliases.CakeExecuteExpression(Cake.Core.ICakeContext,System.String,Cake.Common.Tools.Cake.CakeSettings)">
            <summary>
            Executes Cake expression out of process
            </summary>
            <param name="context">The context.</param>
            <param name="cakeExpression">The cake expression</param>
            <param name="settings">The settings <see cref="T:Cake.Common.Tools.Cake.CakeSettings"/>.</param>
            <example>
            <code>
            CakeExecuteExpression(
                "Information(\"Hello {0}!\", Argument&lt;string&gt;(\"name\"));",
                new CakeSettings {
                    ToolPath="./Cake.exe" ,
                    Arguments = new Dictionary&lt;string, string&gt;{{"name", "World"}}
                    });
            </code>
            </example>
        </member>
        <member name="T:Cake.Common.Tools.Cake.CakeRunner">
            <summary>
            Cake out process runner
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.Cake.CakeRunner.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,Cake.Core.IO.IGlobber,Cake.Core.IO.IProcessRunner)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Tools.Cake.CakeRunner"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The environment.</param>
            <param name="globber">The globber.</param>
            <param name="processRunner">The process runner.</param>
        </member>
        <member name="M:Cake.Common.Tools.Cake.CakeRunner.ExecuteScript(Cake.Core.IO.FilePath,Cake.Common.Tools.Cake.CakeSettings)">
            <summary>
            Executes supplied cake script in own process and supplied settings
            </summary>
            <param name="scriptPath">Path to script to execute</param>
            <param name="settings">optional cake settings</param>
        </member>
        <member name="M:Cake.Common.Tools.Cake.CakeRunner.ExecuteExpression(System.String,Cake.Common.Tools.Cake.CakeSettings)">
            <summary>
            Executes supplied cake code expression in own process and supplied settings
            </summary>
            <param name="cakeExpression">Code expression to execute</param>
            <param name="settings">optional cake settings</param>
        </member>
        <member name="M:Cake.Common.Tools.Cake.CakeRunner.GetToolName">
            <summary>
            Gets the name of the tool.
            </summary>
            <returns>The name of the tool.</returns>
        </member>
        <member name="M:Cake.Common.Tools.Cake.CakeRunner.GetDefaultToolPath(Cake.Common.Tools.Cake.CakeSettings)">
            <summary>
            Gets the default tool path.
            </summary>
            <param name="settings">The settings.</param>
            <returns>The default tool path.</returns>
        </member>
        <member name="T:Cake.Common.Tools.Cake.CakeSettings">
            <summary>
            Contains settings used by <see cref="T:Cake.Common.Tools.Cake.CakeRunner"/>.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.Cake.CakeSettings.ToolPath">
            <summary>
            Gets or sets the tool path.
            </summary>
            <value>The tool path.</value>
        </member>
        <member name="P:Cake.Common.Tools.Cake.CakeSettings.Verbosity">
            <summary>
            Gets or sets the output verbosity.
            </summary>
            <value>The output verbosity.</value>
        </member>
        <member name="P:Cake.Common.Tools.Cake.CakeSettings.Arguments">
            <summary>
            Gets or sets cake additional arguments.
            </summary>
            <value>The properties.</value>
        </member>
        <member name="T:Cake.Common.Tools.ILMerge.ILMergeAliases">
            <summary>
            Contains functionality related to ILMerge.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.ILMerge.ILMergeAliases.ILMerge(Cake.Core.ICakeContext,Cake.Core.IO.FilePath,Cake.Core.IO.FilePath,System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath})">
            <summary>
            Merges the specified assemblies.
            </summary>
            <param name="context">The context.</param>
            <param name="outputFile">The output file.</param>
            <param name="primaryAssembly">The primary assembly.</param>
            <param name="assemblyPaths">The assembly paths.</param>
            <example>
            <code>
            var assemblyPaths = GetFiles("./**/Cake.*.dll");
            ILMerge("./MergedCake.exe", "./Cake.exe", assemblyPaths);
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Tools.ILMerge.ILMergeAliases.ILMerge(Cake.Core.ICakeContext,Cake.Core.IO.FilePath,Cake.Core.IO.FilePath,System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath},Cake.Common.Tools.ILMerge.ILMergeSettings)">
            <summary>
            Merges the specified assemblies.
            </summary>
            <param name="context">The context.</param>
            <param name="outputFile">The output file.</param>
            <param name="primaryAssembly">The primary assembly.</param>
            <param name="assemblyPaths">The assembly paths.</param>
            <param name="settings">The settings.</param>
            <example>
            <code>
            var assemblyPaths = GetFiles("./**/Cake.*.dll");
            ILMerge(
                "./MergedCake.exe",
                "./Cake.exe",
                assemblyPaths,
                new ILMergeSettings { Internalize = true });
            </code>
            </example>
        </member>
        <member name="T:Cake.Common.Tools.ILMerge.ILMergeRunner">
            <summary>
            The ILMerge runner.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.ILMerge.ILMergeRunner.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,Cake.Core.IO.IGlobber,Cake.Core.IO.IProcessRunner)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Tools.ILMerge.ILMergeRunner"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The environment.</param>
            <param name="globber">The globber.</param>
            <param name="processRunner">The process runner.</param>
        </member>
        <member name="M:Cake.Common.Tools.ILMerge.ILMergeRunner.Merge(Cake.Core.IO.FilePath,Cake.Core.IO.FilePath,System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath},Cake.Common.Tools.ILMerge.ILMergeSettings)">
            <summary>
            Merges the specified assemblies.
            </summary>
            <param name="outputAssemblyPath">The output assembly path.</param>
            <param name="primaryAssemblyPath">The primary assembly path.</param>
            <param name="assemblyPaths">The assembly paths.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Common.Tools.ILMerge.ILMergeRunner.GetToolName">
            <summary>
            Gets the name of the tool.
            </summary>
            <returns>The name of the tool.</returns>
        </member>
        <member name="M:Cake.Common.Tools.ILMerge.ILMergeRunner.GetDefaultToolPath(Cake.Common.Tools.ILMerge.ILMergeSettings)">
            <summary>
            Gets the default tool path.
            </summary>
            <param name="settings">The settings.</param>
            <returns>The default tool path.</returns>
        </member>
        <member name="T:Cake.Common.Tools.ILMerge.ILMergeSettings">
            <summary>
            Contains settings used by <see cref="T:Cake.Common.Tools.ILMerge.ILMergeRunner"/>.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.ILMerge.ILMergeSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Tools.ILMerge.ILMergeSettings"/> class.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.ILMerge.ILMergeSettings.Internalize">
            <summary>
            Gets or sets a value indicating whether whether types in assemblies other 
            than the primary assembly should have their visibility modified to internal.
            </summary>
            <value>
            <c>true</c> if types in assemblies other than the primary assembly should 
            have their visibility modified to internal; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.ILMerge.ILMergeSettings.TargetKind">
            <summary>
            Gets or sets the target kind.
            </summary>
            <value>The target kind.</value>
        </member>
        <member name="P:Cake.Common.Tools.ILMerge.ILMergeSettings.ToolPath">
            <summary>
            Gets or sets the tool path.
            </summary>
            <value>The tool path.</value>
        </member>
        <member name="P:Cake.Common.Tools.ILMerge.ILMergeSettings.TargetPlatform">
            <summary>
            Gets or sets the target platform.
            </summary>
            <value>The target platform.</value>
        </member>
        <member name="T:Cake.Common.Tools.ILMerge.TargetKind">
            <summary>
            Represents an ILMerge target.
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.ILMerge.TargetKind.Default">
            <summary>
            TargetKind: <c>Default</c>
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.ILMerge.TargetKind.Dll">
            <summary>
            TargetKind: <c>Dynamic Link Library</c>
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.ILMerge.TargetKind.Exe">
            <summary>
            TargetKind: <c>Executable</c>
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.ILMerge.TargetKind.WinExe">
            <summary>
            TargetKind: <c>Windows executable</c>
            </summary>
        </member>
        <member name="T:Cake.Common.ArgumentAliases">
            <summary>
            Contains functionality related to arguments.
            </summary>
        </member>
        <member name="M:Cake.Common.ArgumentAliases.HasArgument(Cake.Core.ICakeContext,System.String)">
            <summary>
            Determines whether or not the specified argument exist.
            </summary>
            <param name="context">The context.</param>
            <param name="name">The argument name.</param>
            <returns>Whether or not the specified argument exist.</returns>
            <example>
            This sample shows how to call the <see cref="M:Cake.Common.ArgumentAliases.HasArgument(Cake.Core.ICakeContext,System.String)"/> method.
            <code>
            var argumentName = "myArgument";
            //Cake.exe .\hasargument.cake -myArgument="is specified"
            if (HasArgument(argumentName))
            {
                Information("{0} is specified", argumentName);
            }
            //Cake.exe .\hasargument.cake
            else
            {
                Warning("{0} not specified", argumentName);
            } 
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.ArgumentAliases.Argument``1(Cake.Core.ICakeContext,System.String)">
            <summary>
            Gets an argument and throws if the argument is missing.
            </summary>
            <typeparam name="T">The argument type.</typeparam>
            <param name="context">The context.</param>
            <param name="name">The argument name.</param>
            <returns>The value of the argument.</returns>
            <example>
            <code>
            //Cake.exe .\argument.cake -myArgument="is valid" -loopCount = 5
            Information("Argument {0}", Argument&lt;string&gt;("myArgument"));
            var loopCount = Argument&lt;int&gt;("loopCount");
            for(var index = 0;index&lt;loopCount; index++)
            {
                Information("Index {0}", index);
            }
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.ArgumentAliases.Argument``1(Cake.Core.ICakeContext,System.String,``0)">
            <summary>
            Gets an argument and returns the provided <paramref name="defaultValue"/> if the argument is missing.
            </summary>
            <typeparam name="T">The argument type.</typeparam>
            <param name="context">The context.</param>
            <param name="name">The argument name.</param>
            <param name="defaultValue">The value to return if the argument is missing.</param>
            <returns>The value of the argument if it exist; otherwise <paramref name="defaultValue"/>.</returns>
            <example>
            <code>
            //Cake.exe .\argument.cake -myArgument="is valid" -loopCount = 5
            Information("Argument {0}", Argument&lt;string&gt;("myArgument", "is NOT valid"));
            var loopCount = Argument&lt;int&gt;("loopCount", 10);
            for(var index = 0;index&lt;loopCount; index++)
            {
                Information("Index {0}", index);
            }
            </code>
            </example>
        </member>
        <member name="T:Cake.Common.IO.ZipAliases">
            <summary>
            Contains functionality related to compress files to Zip.
            </summary>
        </member>
        <member name="M:Cake.Common.IO.ZipAliases.Zip(Cake.Core.ICakeContext,Cake.Core.IO.DirectoryPath,Cake.Core.IO.FilePath)">
            <summary>
            Zips the specified directory.
            </summary>
            <param name="context">The context.</param>
            <param name="rootPath">The root path.</param>
            <param name="outputPath">The output path.</param>
            <example>
            <code>
            Zip("./publish", "publish.zip");
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.IO.ZipAliases.Zip(Cake.Core.ICakeContext,Cake.Core.IO.DirectoryPath,Cake.Core.IO.FilePath,System.String)">
            <summary>
            Zips the files matching the specified pattern.
            </summary>
            <param name="context">The context.</param>
            <param name="rootPath">The root path.</param>
            <param name="outputPath">The output path.</param>
            <param name="pattern">The pattern.</param>
            <example>
            <code>
            Zip("./", "xmlfiles.zip", "./*.xml");
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.IO.ZipAliases.Zip(Cake.Core.ICakeContext,Cake.Core.IO.DirectoryPath,Cake.Core.IO.FilePath,System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath})">
            <summary>
            Zips the specified files.
            </summary>
            <param name="context">The context.</param>
            <param name="rootPath">The root path.</param>
            <param name="outputPath">The output path.</param>
            <param name="filePaths">The file paths.</param>
            <example>
            <code>
            var files = GetFiles("./**/Cake.*.dll");
            Zip("./", "cakedlls.zip", files);
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.IO.ZipAliases.Zip(Cake.Core.ICakeContext,Cake.Core.IO.DirectoryPath,Cake.Core.IO.FilePath,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Zips the specified files.
            </summary>
            <param name="context">The context.</param>
            <param name="rootPath">The root path.</param>
            <param name="outputPath">The output path.</param>
            <param name="filePaths">The file paths.</param>
            <example>
            <code>
            var files = new [] {
                "./src/Cake/bin/Debug/Autofac.dll",
                "./src/Cake/bin/Debug/Cake.Common.dll",
                "./src/Cake/bin/Debug/Cake.Core.dll",
                "./src/Cake/bin/Debug/Cake.exe"
            };
            Zip("./", "cakebinaries.zip", files);
            </code>
            </example>
        </member>
        <member name="T:Cake.Common.IO.Zipper">
            <summary>
            Performs Zip compression.
            </summary>
        </member>
        <member name="M:Cake.Common.IO.Zipper.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,Cake.Core.Diagnostics.ICakeLog)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.IO.Zipper"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The environment.</param>
            <param name="log">The log.</param>
        </member>
        <member name="M:Cake.Common.IO.Zipper.Zip(Cake.Core.IO.DirectoryPath,Cake.Core.IO.FilePath,System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath})">
            <summary>
            Zips the specified directory.
            </summary>
            <param name="rootPath">The root path.</param>
            <param name="outputPath">The output path.</param>
            <param name="filePaths">The files to zip.</param>
        </member>
        <member name="T:Cake.Common.IO.DirectoryAliases">
            <summary>
            Contains extension methods for working with directories.
            </summary>
        </member>
        <member name="M:Cake.Common.IO.DirectoryAliases.Directory(Cake.Core.ICakeContext,System.String)">
            <summary>
            Gets a directory path from string.
            </summary>
            <example>
            <code>
            // Get the temp directory.
            var root = Directory("./");
            var temp = root + Directory("temp");
            
            // Clean the directory.
            CleanDirectory(temp);
            </code>
            </example>
            <param name="context">The context.</param>
            <param name="path">The path.</param>
            <returns>A directory path.</returns>
        </member>
        <member name="M:Cake.Common.IO.DirectoryAliases.DeleteDirectories(Cake.Core.ICakeContext,System.Collections.Generic.IEnumerable{Cake.Core.IO.DirectoryPath},System.Boolean)">
            <summary>
            Deletes the specified directories.
            </summary>
            <param name="context">The context.</param>
            <param name="directories">The directory paths.</param>
            <param name="recursive">Will perform a recursive delete if set to <c>true</c>.</param>
            <example>
            <code>
            var directoriesToDelete = new DirectoryPath[]{
                Directory("be"),
                Directory("gone")
            };
            DeleteDirectories(directoriesToDelete, recursive:true);
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.IO.DirectoryAliases.DeleteDirectories(Cake.Core.ICakeContext,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Deletes the specified directories.
            </summary>
            <param name="context">The context.</param>
            <param name="directories">The directory paths.</param>
            <param name="recursive">Will perform a recursive delete if set to <c>true</c>.</param>
            <example>
            <code>
            var directoriesToDelete = new []{
                "be",
                "gone"
            };
            DeleteDirectories(directoriesToDelete, recursive:true);
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.IO.DirectoryAliases.DeleteDirectory(Cake.Core.ICakeContext,Cake.Core.IO.DirectoryPath,System.Boolean)">
            <summary>
            Deletes the specified directory.
            </summary>
            <param name="context">The context.</param>
            <param name="path">The directory path.</param>
            <param name="recursive">Will perform a recursive delete if set to <c>true</c>.</param>
            <example>
            <code>
            DeleteDirectory("./be/gone", recursive:true);
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.IO.DirectoryAliases.CleanDirectories(Cake.Core.ICakeContext,System.String)">
            <summary>
            Cleans the directories matching the specified pattern.
            Cleaning the directory will remove all it's content but not the directory itself.
            </summary>
            <param name="context">The context.</param>
            <param name="pattern">The pattern to match.</param>
            <example>
            <code>
            CleanDirectories("./src/**/bin/debug");
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.IO.DirectoryAliases.CleanDirectories(Cake.Core.ICakeContext,System.Collections.Generic.IEnumerable{Cake.Core.IO.DirectoryPath})">
            <summary>
            Cleans the specified directories.
            Cleaning a directory will remove all it's content but not the directory itself.
            </summary>
            <param name="context">The context.</param>
            <param name="directories">The directory paths.</param>
            <example>
            <code>
            var directoriesToClean = GetDirectories("./src/**/bin/");
            CleanDirectories(directoriesToClean);
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.IO.DirectoryAliases.CleanDirectories(Cake.Core.ICakeContext,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Cleans the specified directories.
            Cleaning a directory will remove all it's content but not the directory itself.
            </summary>
            <param name="context">The context.</param>
            <param name="directories">The directory paths.</param>
            <example>
            <code>
            var directoriesToClean = new []{
                "./src/Cake/obj",
                "./src/Cake.Common/obj"
            };
            CleanDirectories(directoriesToClean);
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.IO.DirectoryAliases.CleanDirectory(Cake.Core.ICakeContext,Cake.Core.IO.DirectoryPath)">
            <summary>
            Cleans the specified directory.
            </summary>
            <param name="context">The context.</param>
            <param name="path">The directory path.</param>
            <example>
            <code>
            CleanDirectory("./src/Cake.Common/obj");
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.IO.DirectoryAliases.CleanDirectory(Cake.Core.ICakeContext,Cake.Core.IO.DirectoryPath,System.Func{Cake.Core.IO.IFileSystemInfo,System.Boolean})">
            <summary>
            Cleans the specified directory.
            </summary>
            <param name="context">The context.</param>
            <param name="path">The directory path.</param>
            <param name="predicate">Predicate used to determine which files/directories should get deleted.</param>
            <example>
            <code>
            CleanDirectory("./src/Cake.Common/obj", fileSystemInfo=>!fileSystemInfo.Hidden);
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.IO.DirectoryAliases.CreateDirectory(Cake.Core.ICakeContext,Cake.Core.IO.DirectoryPath)">
            <summary>
            Creates the specified directory.
            </summary>
            <param name="context">The context.</param>
            <param name="path">The directory path.</param>
            <example>
            <code>
            CreateDirectory("publish");
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.IO.DirectoryAliases.CopyDirectory(Cake.Core.ICakeContext,Cake.Core.IO.DirectoryPath,Cake.Core.IO.DirectoryPath)">
            <summary>
            Copies a directory to the specified location.
            </summary>
            <param name="context">The context.</param>
            <param name="source">The source directory path.</param>
            <param name="destination">The destination directory path.</param>
            <example>
            <code>
            CopyDirectory("source_path", "destination_path");
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.IO.DirectoryAliases.DirectoryExists(Cake.Core.ICakeContext,Cake.Core.IO.DirectoryPath)">
            <summary>
            Determines whether the given path refers to an existing directory.
            </summary>
            <param name="context">The context.</param>
            <param name="path">The <see cref="T:Cake.Core.IO.DirectoryPath"/> to check.</param>
            <returns><c>true</c> if <paramref name="path"/> refers to an existing directory;
            <c>false</c> if the directory does not exist or an error occurs when trying to
            determine if the specified path exists.</returns>
            <example>
            <code>
            var dir = "publish";
            if (!DirectoryExists(dir))
            {
                CreateDirectory(dir);
            }
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.IO.DirectoryAliases.MakeAbsolute(Cake.Core.ICakeContext,Cake.Core.IO.DirectoryPath)">
            <summary>
            Makes the path absolute (if relative) using the current working directory.
            </summary>
            <param name="context">The context.</param>
            <param name="path">The path.</param>
            <returns>An absolute directory path.</returns>
            <example>
            <code>
            var path = MakeAbsolute(Directory("./resources"));
            </code>
            </example>
        </member>
        <member name="T:Cake.Common.IO.FileAliases">
            <summary>
            Contains functionality related to file operations.
            </summary>
        </member>
        <member name="M:Cake.Common.IO.FileAliases.File(Cake.Core.ICakeContext,System.String)">
            <summary>
            Gets a file path from string.
            </summary>
            <example>
            <code>
            // Get the temp file.
            var root = Directory("./");
            var temp = root + File("temp");
            
            // Delete the file.
            CleanDirectory(temp);
            </code>
            </example>
            <param name="context">The context.</param>
            <param name="path">The path.</param>
            <returns>A file path.</returns>
        </member>
        <member name="M:Cake.Common.IO.FileAliases.CopyFileToDirectory(Cake.Core.ICakeContext,Cake.Core.IO.FilePath,Cake.Core.IO.DirectoryPath)">
            <summary>
            Copies an existing file to a new location.
            </summary>
            <param name="context">The context.</param>
            <param name="filePath">The file path.</param>
            <param name="targetDirectoryPath">The target directory path.</param>
            <example>
            <code>
            CopyFileToDirectory("test.txt", "./targetdir");
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.IO.FileAliases.CopyFile(Cake.Core.ICakeContext,Cake.Core.IO.FilePath,Cake.Core.IO.FilePath)">
            <summary>
            Copies an existing file to a new file, providing the option to specify a new file name.
            </summary>
            <param name="context">The context.</param>
            <param name="filePath">The file path.</param>
            <param name="targetFilePath">The target file path.</param>
            <example>
            <code>
            CopyFile("test.tmp", "test.txt");
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.IO.FileAliases.CopyFiles(Cake.Core.ICakeContext,System.String,Cake.Core.IO.DirectoryPath)">
            <summary>
            Copies all files matching the provided pattern to a new location.
            </summary>
            <param name="context">The context.</param>
            <param name="pattern">The pattern.</param>
            <param name="targetDirectoryPath">The target directory path.</param>
            <example>
            <code>
            CopyFiles("Cake.*", "./publish");
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.IO.FileAliases.CopyFiles(Cake.Core.ICakeContext,System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath},Cake.Core.IO.DirectoryPath)">
            <summary>
            Copies existing files to a new location.
            </summary>
            <param name="context">The context.</param>
            <param name="filePaths">The file paths.</param>
            <param name="targetDirectoryPath">The target directory path.</param>
            <example>
            <code>
            var files = GetFiles("./**/Cake.*");
            CopyFiles(files, "destination");
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.IO.FileAliases.CopyFiles(Cake.Core.ICakeContext,System.Collections.Generic.IEnumerable{System.String},Cake.Core.IO.DirectoryPath)">
            <summary>
            Copies existing files to a new location.
            </summary>
            <param name="context">The context.</param>
            <param name="filePaths">The file paths.</param>
            <param name="targetDirectoryPath">The target directory path.</param>
            <example>
            <code>
            CreateDirectory("destination");
            var files = new [] {
                "Cake.exe",
                "Cake.pdb"
            };
            CopyFiles(files, "destination");
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.IO.FileAliases.MoveFileToDirectory(Cake.Core.ICakeContext,Cake.Core.IO.FilePath,Cake.Core.IO.DirectoryPath)">
            <summary>
            Moves an existing file to a new location.
            </summary>
            <param name="context">The context.</param>
            <param name="filePath">The file path.</param>
            <param name="targetDirectoryPath">The target directory path.</param>
            <example>
            <code>
            MoveFileToDirectory("test.txt", "./targetdir");
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.IO.FileAliases.MoveFiles(Cake.Core.ICakeContext,System.String,Cake.Core.IO.DirectoryPath)">
            <summary>
            Moves existing files matching the specified pattern to a new location.
            </summary>
            <param name="context">The context.</param>
            <param name="pattern">The pattern.</param>
            <param name="targetDirectoryPath">The target directory path.</param>
            <example>
            <code>
            MoveFiles("./publish/Cake.*", "./destination");
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.IO.FileAliases.MoveFiles(Cake.Core.ICakeContext,System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath},Cake.Core.IO.DirectoryPath)">
            <summary>
            Moves existing files to a new location.
            </summary>
            <param name="context">The context.</param>
            <param name="filePaths">The file paths.</param>
            <param name="targetDirectoryPath">The target directory path.</param>
            <example>
            <code>
            var files = GetFiles("./publish/Cake.*");
            MoveFiles(files, "destination");
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.IO.FileAliases.MoveFile(Cake.Core.ICakeContext,Cake.Core.IO.FilePath,Cake.Core.IO.FilePath)">
            <summary>
            Moves an existing file to a new location, providing the option to specify a new file name.
            </summary>
            <param name="context">The context.</param>
            <param name="filePath">The file path.</param>
            <param name="targetFilePath">The target file path.</param>
            <example>
            <code>
            MoveFile("test.tmp", "test.txt");
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.IO.FileAliases.DeleteFiles(Cake.Core.ICakeContext,System.String)">
            <summary>
            Deletes the specified files.
            </summary>
            <param name="context">The context.</param>
            <param name="pattern">The pattern.</param>
            <example>
            <code>
            DeleteFiles("./publish/Cake.*");
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.IO.FileAliases.DeleteFiles(Cake.Core.ICakeContext,System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath})">
            <summary>
            Deletes the specified files.
            </summary>
            <param name="context">The context.</param>
            <param name="filePaths">The file paths.</param>
            <example>
            <code>
            var files = GetFiles("./destination/Cake.*");
            DeleteFiles(files);
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.IO.FileAliases.DeleteFile(Cake.Core.ICakeContext,Cake.Core.IO.FilePath)">
            <summary>
            Deletes the specified file.
            </summary>
            <param name="context">The context.</param>
            <param name="filePath">The file path.</param>
            <example>
            <code>
            DeleteFile("deleteme.txt");
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.IO.FileAliases.FileExists(Cake.Core.ICakeContext,Cake.Core.IO.FilePath)">
            <summary>
            Determines whether the given path refers to an existing file.
            </summary>
            <param name="context">The context.</param>
            <param name="filePath">The <see cref="T:Cake.Core.IO.FilePath"/> to check.</param>
            <returns><c>true</c> if <paramref name="filePath"/> refers to an existing file;
            <c>false</c> if the file does not exist or an error occurs when trying to
            determine if the specified file exists.</returns>
            <example>
            <code>
            if (FileExists("findme.txt"))
            {
                Information("File exists!");
            }
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.IO.FileAliases.MakeAbsolute(Cake.Core.ICakeContext,Cake.Core.IO.FilePath)">
            <summary>
            Makes the path absolute (if relative) using the current working directory.
            </summary>
            <param name="context">The context.</param>
            <param name="path">The path.</param>
            <returns>An absolute file path.</returns>
            <example>
            <code>
            var path = MakeAbsolute(File("./resources"));
            </code>
            </example>
        </member>
        <member name="T:Cake.Common.IO.GlobbingAliases">
            <summary>
            Contains functionality related to file system globbing.
            </summary>
        </member>
        <member name="M:Cake.Common.IO.GlobbingAliases.GetFiles(Cake.Core.ICakeContext,System.String)">
            <summary>
            Gets all files matching the specified pattern.
            </summary>
            <param name="context">The context.</param>
            <param name="pattern">The glob pattern to match.</param>
            <returns>A <see cref="T:Cake.Core.IO.FilePathCollection"/>.</returns>
            <example>
            <code>
            var files = GetFiles("./**/Cake.*.dll");
            foreach(var file in files)
            {
                Information("File: {0}", file);
            }
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.IO.GlobbingAliases.GetDirectories(Cake.Core.ICakeContext,System.String)">
            <summary>
            Gets all directory matching the specified pattern.
            </summary>
            <param name="context">The context.</param>
            <param name="pattern">The glob pattern to match.</param>
            <returns>A <see cref="T:Cake.Core.IO.DirectoryPathCollection"/>.</returns>
            <example>
            <code>
            var directories = GetDirectories("./src/**/obj/*");
            foreach(var directory in directories)
            {
                Information("Directory: {0}", directory);
            }
            </code>
            </example>
        </member>
        <member name="T:Cake.Common.Tools.ILMerge.TargetPlatform">
            <summary>
            Represents a target platform.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.ILMerge.TargetPlatform.#ctor(Cake.Common.Tools.ILMerge.TargetPlatformVersion)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Tools.ILMerge.TargetPlatform"/> class.
            </summary>
            <param name="platform">The .NET framework target version.</param>
        </member>
        <member name="M:Cake.Common.Tools.ILMerge.TargetPlatform.#ctor(Cake.Common.Tools.ILMerge.TargetPlatformVersion,Cake.Core.IO.DirectoryPath)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Tools.ILMerge.TargetPlatform"/> class.
            </summary>
            <param name="platform">The .NET framework target version.</param>
            <param name="path">The directory where <c>mscorlib.dll</c> can be found.</param>
        </member>
        <member name="P:Cake.Common.Tools.ILMerge.TargetPlatform.Platform">
            <summary>
            Gets the .NET framework target version.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.ILMerge.TargetPlatform.Path">
            <summary>
            Gets the directory where <c>mscorlib.dll</c> can be found.
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.ILMerge.TargetPlatformVersion">
            <summary>
            Represents the .NET Framework for the target assembly
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.ILMerge.TargetPlatformVersion.v1">
            <summary>
            NET Framework v1
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.ILMerge.TargetPlatformVersion.v11">
            <summary>
            NET Framework v1.1
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.ILMerge.TargetPlatformVersion.v2">
            <summary>
            NET Framework v2
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.ILMerge.TargetPlatformVersion.v4">
            <summary>
            NET Framework v4
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.MSBuild.MSBuildAliases">
            <summary>
            Contains functionality related to MSBuild.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.MSBuild.MSBuildAliases.MSBuild(Cake.Core.ICakeContext,Cake.Core.IO.FilePath)">
            <summary>
            Builds the specified solution using MSBuild.
            </summary>
            <param name="context">The context.</param>
            <param name="solution">The solution.</param>
        </member>
        <member name="M:Cake.Common.Tools.MSBuild.MSBuildAliases.MSBuild(Cake.Core.ICakeContext,Cake.Core.IO.FilePath,System.Action{Cake.Common.Tools.MSBuild.MSBuildSettings})">
            <summary>
            Builds the specified solution using MSBuild.
            </summary>
            <param name="context">The context.</param>
            <param name="solution">The solution.</param>
            <param name="configurator">The configurator.</param>
        </member>
        <member name="T:Cake.Common.Tools.MSBuild.MSBuildRunner">
            <summary>
            The MSBuild runner.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.MSBuild.MSBuildRunner.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,Cake.Core.IO.IProcessRunner)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Tools.MSBuild.MSBuildRunner"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The environment.</param>
            <param name="runner">The runner.</param>
        </member>
        <member name="M:Cake.Common.Tools.MSBuild.MSBuildRunner.Run(Cake.Common.Tools.MSBuild.MSBuildSettings)">
            <summary>
            Runs MSBuild with the specified settings.
            </summary>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Common.Tools.MSBuild.MSBuildRunner.GetToolName">
            <summary>
            Gets the name of the tool.
            </summary>
            <returns>The name of the tool.</returns>
        </member>
        <member name="M:Cake.Common.Tools.MSBuild.MSBuildRunner.GetDefaultToolPath(Cake.Common.Tools.MSBuild.MSBuildSettings)">
            <summary>
            Gets the default tool path.
            </summary>
            <param name="settings">The settings.</param>
            <returns>The default tool path.</returns>
        </member>
        <member name="T:Cake.Common.Tools.MSBuild.MSBuildSettings">
            <summary>
            Contains settings used by <see cref="T:Cake.Common.Tools.MSBuild.MSBuildRunner"/>.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.MSBuild.MSBuildSettings.#ctor(Cake.Core.IO.FilePath)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Tools.MSBuild.MSBuildSettings"/> class.
            </summary>
            <param name="solution">The solution.</param>
        </member>
        <member name="P:Cake.Common.Tools.MSBuild.MSBuildSettings.Solution">
            <summary>
            Gets the solution path.
            </summary>
            <value>The solution.</value>
        </member>
        <member name="P:Cake.Common.Tools.MSBuild.MSBuildSettings.Targets">
            <summary>
            Gets the targets.
            </summary>
            <value>The targets.</value>
        </member>
        <member name="P:Cake.Common.Tools.MSBuild.MSBuildSettings.Properties">
            <summary>
            Gets the properties.
            </summary>
            <value>The properties.</value>
        </member>
        <member name="P:Cake.Common.Tools.MSBuild.MSBuildSettings.PlatformTarget">
            <summary>
            Gets or sets the platform target.
            </summary>
            <value>The platform target.</value>
        </member>
        <member name="P:Cake.Common.Tools.MSBuild.MSBuildSettings.ToolVersion">
            <summary>
            Gets or sets the tool version.
            </summary>
            <value>The tool version.</value>
        </member>
        <member name="P:Cake.Common.Tools.MSBuild.MSBuildSettings.Configuration">
            <summary>
            Gets or sets the configuration.
            </summary>
            <value>The configuration.</value>
        </member>
        <member name="P:Cake.Common.Tools.MSBuild.MSBuildSettings.MaxCpuCount">
            <summary>
            Gets or sets the maximum CPU count.
            </summary>
            <value>The maximum CPU count.</value>
        </member>
        <member name="P:Cake.Common.Tools.MSBuild.MSBuildSettings.NodeReuse">
            <summary>
            Gets or sets whether or not node reuse is used.
            When you’re doing multiple builds in a row, this helps reduce your total build time, 
            by avoiding the start up costs of each MSBuild child node.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.MSBuild.MSBuildSettings.Verbosity">
            <summary>
            Gets or sets the amount of information to display in the build log. 
            Each logger displays events based on the verbosity level that you set for that logger.
            </summary>
            <value>The build log verbosity.</value>
        </member>
        <member name="T:Cake.Common.Tools.MSBuild.MSBuildSettingsExtensions">
            <summary>
            Contains functionality related to MSBuild settings.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.MSBuild.MSBuildSettingsExtensions.WithTarget(Cake.Common.Tools.MSBuild.MSBuildSettings,System.String)">
            <summary>
            Adds a MSBuild target to the configuration.
            </summary>
            <param name="settings">The settings.</param>
            <param name="target">The MSBuild target.</param>
            <returns>The same <see cref="T:Cake.Common.Tools.MSBuild.MSBuildSettings"/> instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Cake.Common.Tools.MSBuild.MSBuildSettingsExtensions.UseToolVersion(Cake.Common.Tools.MSBuild.MSBuildSettings,Cake.Common.Tools.MSBuild.MSBuildToolVersion)">
            <summary>
            Sets the tool version.
            </summary>
            <param name="settings">The settings.</param>
            <param name="version">The version.</param>
            <returns>The same <see cref="T:Cake.Common.Tools.MSBuild.MSBuildSettings"/> instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Cake.Common.Tools.MSBuild.MSBuildSettingsExtensions.SetPlatformTarget(Cake.Common.Tools.MSBuild.MSBuildSettings,Cake.Common.Tools.MSBuild.PlatformTarget)">
            <summary>
            Sets the platform target.
            </summary>
            <param name="settings">The settings.</param>
            <param name="target">The target.</param>
            <returns>The same <see cref="T:Cake.Common.Tools.MSBuild.MSBuildSettings"/> instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Cake.Common.Tools.MSBuild.MSBuildSettingsExtensions.WithProperty(Cake.Common.Tools.MSBuild.MSBuildSettings,System.String,System.String[])">
            <summary>
            Adds a property to the configuration.
            </summary>
            <param name="settings">The settings.</param>
            <param name="name">The property name.</param>
            <param name="values">The property values.</param>
            <returns>The same <see cref="T:Cake.Common.Tools.MSBuild.MSBuildSettings"/> instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Cake.Common.Tools.MSBuild.MSBuildSettingsExtensions.SetConfiguration(Cake.Common.Tools.MSBuild.MSBuildSettings,System.String)">
            <summary>
            Sets the configuration.
            </summary>
            <param name="settings">The settings.</param>
            <param name="configuration">The configuration.</param>
            <returns>The same <see cref="T:Cake.Common.Tools.MSBuild.MSBuildSettings"/> instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Cake.Common.Tools.MSBuild.MSBuildSettingsExtensions.SetMaxCpuCount(Cake.Common.Tools.MSBuild.MSBuildSettings,System.Int32)">
            <summary>
            Sets the maximum CPU count.
            </summary>
            <param name="settings">The settings.</param>
            <param name="maxCpuCount">The maximum CPU count.</param>
            <returns>The same <see cref="T:Cake.Common.Tools.MSBuild.MSBuildSettings"/> instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Cake.Common.Tools.MSBuild.MSBuildSettingsExtensions.SetNodeReuse(Cake.Common.Tools.MSBuild.MSBuildSettings,System.Boolean)">
            <summary>
            Sets whether or not node reuse should be enabled.
            </summary>
            <param name="settings">The settings.</param>
            <param name="reuse"><c>true</c> if node reuse should be enabled; otherwise <c>false</c>.</param>
            <returns>The same <see cref="T:Cake.Common.Tools.MSBuild.MSBuildSettings"/> instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Cake.Common.Tools.MSBuild.MSBuildSettingsExtensions.SetVerbosity(Cake.Common.Tools.MSBuild.MSBuildSettings,Cake.Core.Diagnostics.Verbosity)">
            <summary>
            Sets the build log verbosity.
            </summary>
            <param name="settings">The settings.</param>
            <param name="verbosity">The build log verbosity.</param>
            <returns>The same <see cref="T:Cake.Common.Tools.MSBuild.MSBuildSettings"/> instance so that multiple calls can be chained.</returns>
        </member>
        <member name="T:Cake.Common.Tools.MSBuild.MSBuildToolVersion">
            <summary>
            Represents a MSBuild tool version.
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.MSBuild.MSBuildToolVersion.Default">
            <summary>
            The highest available MSBuild tool version.
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.MSBuild.MSBuildToolVersion.NET20">
            <summary>
            MSBuild tool version: <c>.NET 2.0</c>
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.MSBuild.MSBuildToolVersion.NET30">
            <summary>
            MSBuild tool version: <c>.NET 3.0</c>
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.MSBuild.MSBuildToolVersion.VS2005">
            <summary>
            MSBuild tool version: <c>Visual Studio 2005</c>
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.MSBuild.MSBuildToolVersion.NET35">
            <summary>
            MSBuild tool version: <c>.NET 3.5</c>
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.MSBuild.MSBuildToolVersion.VS2008">
            <summary>
            MSBuild tool version: <c>Visual Studio 2008</c>
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.MSBuild.MSBuildToolVersion.NET40">
            <summary>
            MSBuild tool version: <c>.NET 4.0</c>
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.MSBuild.MSBuildToolVersion.NET45">
            <summary>
            MSBuild tool version: <c>.NET 4.5</c>
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.MSBuild.MSBuildToolVersion.VS2010">
            <summary>
            MSBuild tool version: <c>Visual Studio 2010</c>
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.MSBuild.MSBuildToolVersion.VS2011">
            <summary>
            MSBuild tool version: <c>Visual Studio 2011</c>
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.MSBuild.MSBuildToolVersion.VS2012">
            <summary>
            MSBuild tool version: <c>Visual Studio 2012</c>
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.MSBuild.MSBuildToolVersion.NET451">
            <summary>
            MSBuild tool version: <c>.NET 4.5.1</c>
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.MSBuild.MSBuildToolVersion.NET452">
            <summary>
            MSBuild tool version: <c>.NET 4.5.2</c>
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.MSBuild.MSBuildToolVersion.VS2013">
            <summary>
            MSBuild tool version: <c>Visual Studio 2013</c>
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.MSBuild.MSBuildToolVersion.VS2015">
            <summary>
            MSBuild tool version: <c>Visual Studio 2015</c>
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.MSBuild.MSBuildToolVersion.NET46">
            <summary>
            MSBuild tool version: <c>.NET 4.6</c>
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.MSBuild.PlatformTarget">
            <summary>
            Represents a MSBuild platform target.
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.MSBuild.PlatformTarget.MSIL">
            <summary>
            PlatformTarget: <c>MSIL</c> (AnyCPU)
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.MSBuild.PlatformTarget.x86">
            <summary>
            PlatformTarget: <c>x86</c>
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.MSBuild.PlatformTarget.x64">
            <summary>
            PlatformTarget: <c>x64</c>
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.MSTest.MSTestAliases">
            <summary>
            Contains functionality related to running MSTest unit tests.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.MSTest.MSTestAliases.MSTest(Cake.Core.ICakeContext,System.String)">
            <summary>
            Runs all MSTest unit tests in the assemblies matching the specified pattern.
            </summary>
            <param name="context">The context.</param>
            <param name="pattern">The pattern.</param>
        </member>
        <member name="M:Cake.Common.Tools.MSTest.MSTestAliases.MSTest(Cake.Core.ICakeContext,System.String,Cake.Common.Tools.MSTest.MSTestSettings)">
            <summary>
            Runs all MSTest unit tests in the assemblies matching the specified pattern.
            </summary>
            <param name="context">The context.</param>
            <param name="pattern">The pattern.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Common.Tools.MSTest.MSTestAliases.MSTest(Cake.Core.ICakeContext,System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath})">
            <summary>
            Runs all MSTest unit tests in the specified assemblies.
            </summary>
            <param name="context">The context.</param>
            <param name="assemblyPaths">The assembly paths.</param>
        </member>
        <member name="M:Cake.Common.Tools.MSTest.MSTestAliases.MSTest(Cake.Core.ICakeContext,System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath},Cake.Common.Tools.MSTest.MSTestSettings)">
            <summary>
            Runs all MSTest unit tests in the specified assemblies.
            </summary>
            <param name="context">The context.</param>
            <param name="assemblyPaths">The assembly paths.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="T:Cake.Common.Tools.MSTest.MSTestRunner">
            <summary>
            The MSTest unit test runner.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.MSTest.MSTestRunner.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,Cake.Core.IO.IProcessRunner)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Tools.MSTest.MSTestRunner"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The environment.</param>
            <param name="processRunner">The process runner.</param>
        </member>
        <member name="M:Cake.Common.Tools.MSTest.MSTestRunner.Run(Cake.Core.IO.FilePath,Cake.Common.Tools.MSTest.MSTestSettings)">
            <summary>
            Runs the tests in the specified assembly.
            </summary>
            <param name="assemblyPath">The assembly path.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Common.Tools.MSTest.MSTestRunner.GetToolName">
            <summary>
            Gets the name of the tool.
            </summary>
            <returns>The tool name.</returns>
        </member>
        <member name="M:Cake.Common.Tools.MSTest.MSTestRunner.GetDefaultToolPath(Cake.Common.Tools.MSTest.MSTestSettings)">
            <summary>
            Gets the default tool path.
            </summary>
            <param name="settings">The settings.</param>
            <returns>The default tool path.</returns>
        </member>
        <member name="T:Cake.Common.Tools.MSTest.MSTestSettings">
            <summary>
            Contains settings used by <see cref="T:Cake.Common.Tools.MSTest.MSTestRunner"/>.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.MSTest.MSTestSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Tools.MSTest.MSTestSettings"/> class.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.MSTest.MSTestSettings.ToolPath">
            <summary>
            Gets or sets the tool path.
            </summary>
            <value>The tool path.</value>
        </member>
        <member name="P:Cake.Common.Tools.MSTest.MSTestSettings.NoIsolation">
            <summary>
            Gets or sets a value indicating whether to run tests within the MSTest process.
            This choice improves test run speed but increases risk to the MSTest.exe process.
            Defaults to <c>true</c>.
            </summary>
            <value>
              <c>true</c> if running without isolation; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Cake.Common.Tools.NSIS.MakeNSISRunner">
            <summary>
            The runner which executes NSIS.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.NSIS.MakeNSISRunner.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,Cake.Core.IO.IGlobber,Cake.Core.IO.IProcessRunner)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Tools.NSIS.MakeNSISRunner"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The environment.</param>
            <param name="globber">The globber.</param>
            <param name="processRunner">The process runner.</param>
        </member>
        <member name="M:Cake.Common.Tools.NSIS.MakeNSISRunner.Run(Cake.Core.IO.FilePath,Cake.Common.Tools.NSIS.MakeNSISSettings)">
            <summary>
            Runs <c>makensis.exe</c> with the specified script files and settings.
            </summary>
            <param name="scriptFile">The script file (<c>.nsi</c>) to compile.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Common.Tools.NSIS.MakeNSISRunner.GetToolName">
            <summary>
            Gets the name of the tool.
            </summary>
            <returns>The name of the tool.</returns>
        </member>
        <member name="M:Cake.Common.Tools.NSIS.MakeNSISRunner.GetDefaultToolPath(Cake.Common.Tools.NSIS.MakeNSISSettings)">
            <summary>
            Gets the default tool path.
            </summary>
            <param name="settings">The settings.</param>
            <returns>The default tool path.</returns>
        </member>
        <member name="T:Cake.Common.Tools.NSIS.MakeNSISSettings">
            <summary>
            Contains settings used by the <see cref="T:Cake.Common.Tools.NSIS.MakeNSISRunner"/>.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.NSIS.MakeNSISSettings.Defines">
            <summary>
            Gets or sets the script compiler defines.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.NSIS.MakeNSISSettings.NoChangeDirectory">
            <summary>
            Gets or sets a value indicating whether to disable current directory change to that of the script file.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.NSIS.MakeNSISSettings.NoConfig">
            <summary>
            Gets or sets a value indicating whether to disable inclusion of the <c>nsisconf.nsh</c> file.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.NSIS.MakeNSISSettings.ToolPath">
            <summary>
            Gets or sets the path to <c>makensis.exe</c>.
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.NSIS.NSISAliases">
            <summary>
            Contains functionality related to running NSIS.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.NSIS.NSISAliases.MakeNSIS(Cake.Core.ICakeContext,Cake.Core.IO.FilePath)">
            <summary>
            Compiles the given NSIS script using the default settings.
            </summary>
            <param name="context">The context.</param>
            <param name="scriptFile">The path to the <c>.nsi</c> script file to compile.</param>
        </member>
        <member name="M:Cake.Common.Tools.NSIS.NSISAliases.MakeNSIS(Cake.Core.ICakeContext,Cake.Core.IO.FilePath,Cake.Common.Tools.NSIS.MakeNSISSettings)">
            <summary>
            Compiles the given NSIS script using the given <paramref name="settings"/>.
            </summary>
            <param name="context">The context.</param>
            <param name="scriptFile">The path to the <c>.nsi</c> script file to compile.</param>
            <param name="settings">The <see cref="T:Cake.Common.Tools.NSIS.MakeNSISSettings"/> to use.</param>
        </member>
        <member name="T:Cake.Common.Tools.NuGet.Install.NuGetInstaller">
            <summary>
            The NuGet package installer used to install NuGet packages.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.NuGet.Install.NuGetInstaller.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,Cake.Core.IO.IProcessRunner,Cake.Core.IO.IToolResolver)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Tools.NuGet.Install.NuGetInstaller"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The environment.</param>
            <param name="processRunner">The process runner.</param>
            <param name="nugetToolResolver">The NuGet tool resolver.</param>
        </member>
        <member name="M:Cake.Common.Tools.NuGet.Install.NuGetInstaller.InstallFromConfig(Cake.Core.IO.FilePath,Cake.Common.Tools.NuGet.Install.NuGetInstallSettings)">
            <summary>
            Installs NuGet packages using the specified package configuration file and settings.
            </summary>
            <param name="packageConfigPath">Path to package configuration to use for install.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Common.Tools.NuGet.Install.NuGetInstaller.Install(System.String,Cake.Common.Tools.NuGet.Install.NuGetInstallSettings)">
            <summary>
            Installs NuGet packages using the specified package id and settings.
            </summary>
            <param name="packageId">The source package id.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Common.Tools.NuGet.Install.NuGetInstaller.GetToolName">
            <summary>
            Gets the name of the tool.
            </summary>
            <returns>The name of the tool.</returns>
        </member>
        <member name="M:Cake.Common.Tools.NuGet.Install.NuGetInstaller.GetDefaultToolPath(Cake.Common.Tools.NuGet.Install.NuGetInstallSettings)">
            <summary>
            Gets the default tool path.
            </summary>
            <param name="settings">The settings.</param>
            <returns>The default tool path.</returns>
        </member>
        <member name="T:Cake.Common.Tools.NuGet.Install.NuGetInstallSettings">
            <summary>
            Contains settings used by <see cref="T:Cake.Common.Tools.NuGet.Install.NuGetInstaller"/>.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Install.NuGetInstallSettings.ToolPath">
            <summary>
            Gets or sets the path to <c>nuget.exe</c>.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Install.NuGetInstallSettings.OutputDirectory">
            <summary>
            Gets or sets the directory in which packages will be installed. 
            If none is specified, the current directory will be used.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Install.NuGetInstallSettings.Version">
            <summary>
            Gets or sets the version of the package to install.
            If none specified, the latest will be used.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Install.NuGetInstallSettings.ExcludeVersion">
            <summary>
            Gets or sets a value indicating whether to exclude the version number from the package folder.
            </summary>
            <value>
              <c>true</c> if to exclude the version number from the package folder; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Install.NuGetInstallSettings.Prerelease">
            <summary>
            Gets or sets a value indicating whether to allow installation of prerelease packages.
            This flag is not required when restoring packages by installing from packages.config.
            </summary>
            <value>
              <c>true</c> to allow installation of prerelease packages; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Install.NuGetInstallSettings.RequireConsent">
            <summary>
            Gets or sets a value indicating whether to check if package
            install consent is granted before installing a package.
            </summary>
            <value>
              <c>true</c> if to check if package install consent is granted before installing a package; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Install.NuGetInstallSettings.SolutionDirectory">
            <summary>
            Gets or sets the solution directory path for package restore.
            </summary>
            <value>
            The solution directory path.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Install.NuGetInstallSettings.Source">
            <summary>
            Gets or sets a list of packages sources to use for this command.
            </summary>
            <value>The list of packages sources to use for this command.</value>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Install.NuGetInstallSettings.NoCache">
            <summary>
            Gets or sets a value indicating whether or not to use the machine cache as the first package source.
            </summary>
            <value>
              <c>true</c> to not use the machine cache as the first package source; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Install.NuGetInstallSettings.DisableParallelProcessing">
            <summary>
            Gets or sets a value indicating whether to disable parallel processing of packages for this command.
            Disable parallel processing of packages for this command.
            </summary>
            <value>
              <c>true</c> to disable parallel processing of packages for this command; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Install.NuGetInstallSettings.Verbosity">
            <summary>
            Gets or sets the output verbosity.
            </summary>
            <value>The output verbosity.</value>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Install.NuGetInstallSettings.ConfigFile">
            <summary>
            Gets or sets the NuGet configuration file.
            If not specified, the file <c>%AppData%\NuGet\NuGet.config</c> is used as the configuration file.
            </summary>
            <value>The NuGet configuration file.</value>
        </member>
        <member name="T:Cake.Common.Tools.NuGet.Pack.NuSpecContent">
            <summary>
            Represents a NuGet nuspec file
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Pack.NuSpecContent.Source">
            <summary>
            Gets or sets the location of the file or files to include. 
            The path is relative to the NuSpec file unless an absolute path is specified. 
            The wildcard character - <c>*</c> - is allowed. 
            Using a double wildcard - <c>**</c> implies a recursive directory search.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Pack.NuSpecContent.Target">
            <summary>
            Gets or sets the relative path to the directory within the package where the source files will be placed.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Pack.NuSpecContent.Exclude">
            <summary>
            Gets or sets the file or files to exclude. 
            This is usually combined with a wildcard value in the <c>src</c> attribute. 
            The <c>exclude</c> attribute can contain a semi-colon delimited list of files or a file pattern. 
            Using a double wildcard - <c>**</c> - implies a recursive exclude pattern.
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.NuGet.SetApiKey.NuGetSetApiKey">
            <summary>
            The NuGet set API key used to set API key used for API/feed authentication.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.NuGet.SetApiKey.NuGetSetApiKey.#ctor(Cake.Core.Diagnostics.ICakeLog,Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,Cake.Core.IO.IProcessRunner,Cake.Core.IO.IToolResolver)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Tools.NuGet.SetApiKey.NuGetSetApiKey"/> class.
            </summary>
            <param name="log">The log.</param>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The environment.</param>
            <param name="processRunner">The process runner.</param>
            <param name="nugetToolResolver">The NuGet tool resolver.</param>
        </member>
        <member name="M:Cake.Common.Tools.NuGet.SetApiKey.NuGetSetApiKey.SetApiKey(System.String,System.String,Cake.Common.Tools.NuGet.SetApiKey.NuGetSetApiKeySettings)">
            <summary>
            Installs NuGet packages using the specified package id and settings.
            </summary>
            <param name="apiKey">The API key.</param>
            <param name="source">The Server URL where the API key is valid.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Common.Tools.NuGet.SetApiKey.NuGetSetApiKey.GetToolName">
            <summary>
            Gets the name of the tool.
            </summary>
            <returns>The name of the tool.</returns>
        </member>
        <member name="M:Cake.Common.Tools.NuGet.SetApiKey.NuGetSetApiKey.GetDefaultToolPath(Cake.Common.Tools.NuGet.SetApiKey.NuGetSetApiKeySettings)">
            <summary>
            Gets the default tool path.
            </summary>
            <param name="settings">The settings.</param>
            <returns>The default tool path.</returns>
        </member>
        <member name="T:Cake.Common.Tools.NuGet.SetApiKey.NuGetSetApiKeySettings">
            <summary>
            Contains settings used by <see cref="T:Cake.Common.Tools.NuGet.SetApiKey.NuGetSetApiKey"/>.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.SetApiKey.NuGetSetApiKeySettings.ToolPath">
            <summary>
            Gets or sets the path to <c>nuget.exe</c>.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.SetApiKey.NuGetSetApiKeySettings.Verbosity">
            <summary>
            Gets or sets the output verbosity.
            </summary>
            <value>The output verbosity.</value>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.SetApiKey.NuGetSetApiKeySettings.ConfigFile">
            <summary>
            Gets or sets the NuGet configuration file.
            If not specified, the file <c>%AppData%\NuGet\NuGet.config</c> is used as the configuration file.
            </summary>
            <value>The NuGet configuration file.</value>
        </member>
        <member name="T:Cake.Common.Tools.NuGet.Sources.NuGetSources">
            <summary>
            The NuGet sources is used to work with user config feeds &amp; credentials
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.NuGet.Sources.NuGetSources.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,Cake.Core.IO.IProcessRunner,Cake.Core.IO.IToolResolver)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Tools.NuGet.Sources.NuGetSources"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The environment.</param>
            <param name="processRunner">The process runner.</param>
            <param name="nugetToolResolver">The NuGet tool resolver.</param>
        </member>
        <member name="M:Cake.Common.Tools.NuGet.Sources.NuGetSources.AddSource(System.String,System.String,Cake.Common.Tools.NuGet.Sources.NuGetSourcesSettings)">
            <summary>
            Adds NuGet package source using the specified settings to global user config
            </summary>
            <param name="name">Name of the source.</param>
            <param name="source">Path to the package(s) source.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Common.Tools.NuGet.Sources.NuGetSources.RemoveSource(System.String,System.String,Cake.Common.Tools.NuGet.Sources.NuGetSourcesSettings)">
            <summary>
            Remove specified NuGet package source
            </summary>
            <param name="name">Name of the source.</param>
            <param name="source">Path to the package(s) source.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Common.Tools.NuGet.Sources.NuGetSources.HasSource(System.String,Cake.Common.Tools.NuGet.Sources.NuGetSourcesSettings)">
            <summary>
            Determines whether the specified NuGet package source exist.
            </summary>
            <param name="source">Path to the package(s) source.</param>
            <param name="settings">The settings.</param>
            <returns>Whether the specified NuGet package source exist.</returns>
        </member>
        <member name="M:Cake.Common.Tools.NuGet.Sources.NuGetSources.GetToolName">
            <summary>
            Gets the name of the tool.
            </summary>
            <returns>The name of the tool.</returns>
        </member>
        <member name="M:Cake.Common.Tools.NuGet.Sources.NuGetSources.GetDefaultToolPath(Cake.Common.Tools.NuGet.Sources.NuGetSourcesSettings)">
            <summary>
            Gets the default tool path.
            </summary>
            <param name="settings">The settings.</param>
            <returns>The default tool path.</returns>
        </member>
        <member name="T:Cake.Common.Tools.NuGet.Sources.NuGetSourcesSettings">
            <summary>
            Contains settings used by <see cref="T:Cake.Common.Tools.NuGet.Sources.NuGetSources"/>.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Sources.NuGetSourcesSettings.UserName">
            <summary>
            Gets or sets the (optional) user name.
            </summary>
            <value>Optional user name to be used when connecting to an authenticated source.</value>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Sources.NuGetSourcesSettings.Password">
            <summary>
            Gets or sets the (optional) password.
            </summary>
            <value>Optional password to be used when connecting to an authenticated source.</value>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Sources.NuGetSourcesSettings.Verbosity">
            <summary>
            Gets or sets the output verbosity.
            </summary>
            <value>The output verbosity.</value>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Sources.NuGetSourcesSettings.IsSensitiveSource">
            <summary>
            Gets or sets a value indicating whether this source contains sensitive data, i.e. authentication token in url.
            </summary>
            <value>
            <c>true</c> if this source contains sensitive data; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Sources.NuGetSourcesSettings.ToolPath">
            <summary>
            Gets or sets the tool path.
            </summary>
            <value>The tool path.</value>
        </member>
        <member name="T:Cake.Common.Tools.NuGet.NuGetAliases">
            <summary>
            Contains functionality for working with NuGet.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.NuGet.NuGetAliases.NuGetPack(Cake.Core.ICakeContext,Cake.Core.IO.FilePath,Cake.Common.Tools.NuGet.Pack.NuGetPackSettings)">
            <summary>
            Creates a NuGet package using the specified Nuspec file.
            </summary>
            <param name="context">The context.</param>
            <param name="nuspecFilePath">The nuspec file path.</param>
            <param name="settings">The settings.</param>
            <example>
            <code>
                var nuGetPackSettings   = new NuGetPackSettings {
                                                Id                      = "TestNuget",
                                                Version                 = "0.0.0.1",
                                                Title                   = "The tile of the package",
                                                Authors                 = new[] {"John Doe"},
                                                Owners                  = new[] {"Contoso"},
                                                Description             = "The description of the package",
                                                Summary                 = "Excellent summare of what the package does", 
                                                ProjectUrl              = new Uri("https://github.com/SomeUser/TestNuget/"),
                                                IconUrl                 = new Uri("http://cdn.rawgit.com/SomeUser/TestNuget/master/icons/testnuget.png"),
                                                LicenseUrl              = new Uri("https://github.com/SomeUser/TestNuget/blob/master/LICENSE.md"),
                                                Copyright               = "Some company 2015",
                                                ReleaseNotes            = new [] {"Bug fixes", "Issue fixes", "Typos"},
                                                Tags                    = new [] {"Cake", "Script", "Build"},
                                                RequireLicenseAcceptance= false,        
                                                Symbols                 = false,
                                                NoPackageAnalysis       = true,
                                                Files                   = new [] {
                                                                                     new NuSpecContent {Source = "bin/SlackPRTGCommander.dll", Target = "bin"},
                                                                                  },
                                                BasePath                = "./src/TestNuget/bin/release", 
                                                OutputDirectory         = "./nuget"
                                            };
                
                NuGetPack("./nuspec/SlackPRTGCommander.nuspec", nuGetPackSettings);
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Tools.NuGet.NuGetAliases.NuGetRestore(Cake.Core.ICakeContext,Cake.Core.IO.FilePath)">
            <summary>
            Restores NuGet packages for the specified target.
            </summary>
            <param name="context">The context.</param>
            <param name="targetFilePath">The target to restore.</param>
            <example>
            <code>
                var solutions = GetFiles("./**/*.sln");
                // Restore all NuGet packages.
                foreach(var solution in solutions)
                {
                    Information("Restoring {0}", solution);
                    NuGetRestore(solution);
                }
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Tools.NuGet.NuGetAliases.NuGetRestore(Cake.Core.ICakeContext,Cake.Core.IO.FilePath,Cake.Common.Tools.NuGet.Restore.NuGetRestoreSettings)">
            <summary>
            Restores NuGet packages using the specified settings.
            </summary>
            <param name="context">The context.</param>
            <param name="targetFilePath">The target to restore.</param>
            <param name="settings">The settings.</param>
            <example>
            <code>
                var solutions = GetFiles("./**/*.sln");
                // Restore all NuGet packages.
                foreach(var solution in solutions)
                {
                    Information("Restoring {0}", solution);
                    NuGetRestore(solution, new NuGetRestoreSettings { NoCache = true });
                }
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Tools.NuGet.NuGetAliases.NuGetPush(Cake.Core.ICakeContext,Cake.Core.IO.FilePath,Cake.Common.Tools.NuGet.Push.NuGetPushSettings)">
            <summary>
            Pushes a NuGet package to a NuGet server and publishes it.
            </summary>
            <param name="context">The context.</param>
            <param name="packageFilePath">The <c>.nupkg</c> file path.</param>
            <param name="settings">The settings.</param>
            <example>
            <code>
            // Get the path to the package.
            var package = "./nuget/SlackPRTGCommander.0.0.1.nupkg";
            
            // Push the package.
            NuGetPush(package, new NuGetPushSettings {
                Source = "http://example.com/nugetfeed",
                ApiKey = "4003d786-cc37-4004-bfdf-c4f3e8ef9b3a"
            }); 
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Tools.NuGet.NuGetAliases.NuGetAddSource(Cake.Core.ICakeContext,System.String,System.String)">
            <summary>
            Adds NuGet package source using the specified name &amp;source to global user config
            </summary>
            <param name="context">The context.</param>
            <param name="name">Name of the source.</param>
            <param name="source">Path to the package(s) source.</param>
            <example>
            <code>
            var feed = new
                        {
                            Name = EnvironmentVariable("PUBLIC_FEED_NAME"),
                            Source = EnvironmentVariable("PUBLIC_FEED_SOURCE")
                        };
            
            NuGetAddSource(
                name:feed.Name,
                source:feed.Source
            );
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Tools.NuGet.NuGetAliases.NuGetAddSource(Cake.Core.ICakeContext,System.String,System.String,Cake.Common.Tools.NuGet.Sources.NuGetSourcesSettings)">
            <summary>
            Adds NuGet package source using the specified name, source &amp; settings to global user config
            </summary>
            <param name="context">The context.</param>
            <param name="name">Name of the source.</param>
            <param name="source">Path to the package(s) source.</param>
            <param name="settings">The settings.</param>
            <example>
            <code>
            var nugetSourceSettings = new NuGetSourcesSettings
                                        {
                                            UserName = EnvironmentVariable("PRIVATE_FEED_USERNAME"),
                                            Password = EnvironmentVariable("PRIVATE_FEED_PASSWORD"),
                                            IsSensitiveSource = true,
                                            Verbosity = NuGetVerbosity.Detailed
                                        };
            
            var feed = new
                        {
                            Name = EnvironmentVariable("PRIVATE_FEED_NAME"),
                            Source = EnvironmentVariable("PRIVATE_FEED_SOURCE")
                        };
            
            NuGetAddSource(
                name:feed.Name,
                source:feed.Source,
                settings:nugetSourceSettings
            );
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Tools.NuGet.NuGetAliases.NuGetRemoveSource(Cake.Core.ICakeContext,System.String,System.String)">
            <summary>
            Removes NuGet package source using the specified name &amp; source from global user config
            </summary>
            <param name="context">The context.</param>
            <param name="name">Name of the source.</param>
            <param name="source">Path to the package(s) source.</param>
            <example>
            <code>
            var feed = new
                        {
                            Name = EnvironmentVariable("PRIVATE_FEED_NAME"),
                            Source = EnvironmentVariable("PRIVATE_FEED_SOURCE")
                        };
            
            NuGetRemoveSource(
               name:feed.Name,
               source:feed.Source
            );
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Tools.NuGet.NuGetAliases.NuGetRemoveSource(Cake.Core.ICakeContext,System.String,System.String,Cake.Common.Tools.NuGet.Sources.NuGetSourcesSettings)">
            <summary>
            Removes NuGet package source using the specified name, source &amp; settings from global user config
            </summary>
            <param name="context">The context.</param>
            <param name="name">Name of the source.</param>
            <param name="source">Path to the package(s) source.</param>
            <param name="settings">The settings.</param>
            <example>
            <code>
            var nugetSourceSettings = new NuGetSourcesSettings
                                        {
                                            UserName = EnvironmentVariable("PRIVATE_FEED_USERNAME"),
                                            Password = EnvironmentVariable("PRIVATE_FEED_PASSWORD"),
                                            IsSensitiveSource = true,
                                            Verbosity = NuGetVerbosity.Detailed
                                        };
            
            var feed = new
                        {
                            Name = EnvironmentVariable("PRIVATE_FEED_NAME"),
                            Source = EnvironmentVariable("PRIVATE_FEED_SOURCE")
                        };
            
            NuGetRemoveSource(
               name:feed.Name,
               source:feed.Source,
               settings:nugetSourceSettings
            );
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Tools.NuGet.NuGetAliases.NuGetHasSource(Cake.Core.ICakeContext,System.String)">
            <summary>
            Checks whether or not a NuGet package source exists in the global user configuration, using the specified source.
            </summary>
            <param name="context">The context.</param>
            <param name="source">Path to the package(s) source.</param>
            <returns>Whether or not the NuGet package source exists in the global user configuration.</returns>
            <example>
              <code>
            var feed = new
            {
            Name = EnvironmentVariable("PRIVATE_FEED_NAME"),
            Source = EnvironmentVariable("PRIVATE_FEED_SOURCE")
            };
            if (!NuGetHasSource(
            source:feed.Source
            ))
            {
            Information("Source missing");
            }
            else
            {
            Information("Source already exists");
            }
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Tools.NuGet.NuGetAliases.NuGetHasSource(Cake.Core.ICakeContext,System.String,Cake.Common.Tools.NuGet.Sources.NuGetSourcesSettings)">
            <summary>
            Checks whether or not a NuGet package source exists in the global user configuration, using the specified source and settings.
            </summary>
            <param name="context">The context.</param>
            <param name="source">Path to the package(s) source.</param>
            <param name="settings">The settings.</param>
            <returns>Whether the specified NuGet package source exist.</returns>
            <example>
              <code>
            var nugetSourceSettings = new NuGetSourcesSettings
            {
            UserName = EnvironmentVariable("PRIVATE_FEED_USERNAME"),
            Password = EnvironmentVariable("PRIVATE_FEED_PASSWORD"),
            IsSensitiveSource = true,
            Verbosity = NuGetVerbosity.Detailed
            };
            var feed = new
            {
            Name = EnvironmentVariable("PRIVATE_FEED_NAME"),
            Source = EnvironmentVariable("PRIVATE_FEED_SOURCE")
            };
            if (!NuGetHasSource(
            source:feed.Source,
            settings:nugetSourceSettings
            ))
            {
            Information("Source missing");
            }
            else
            {
            Information("Source already exists");
            }
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Tools.NuGet.NuGetAliases.NuGetInstall(Cake.Core.ICakeContext,System.String)">
            <summary>
            Installs a NuGet package.
            </summary>
            <param name="context">The context.</param>
            <param name="packageId">The id of the package to install.</param>
            <example>
            <code>
            NuGetInstall("MyNugetPackage");
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Tools.NuGet.NuGetAliases.NuGetInstall(Cake.Core.ICakeContext,System.String,Cake.Common.Tools.NuGet.Install.NuGetInstallSettings)">
            <summary>
            Installs a NuGet package using the specified settings.
            </summary>
            <param name="context">The context.</param>
            <param name="packageId">The id of the package to install.</param>
            <param name="settings">The settings.</param>
            <example>
            <code>
            NuGetInstall("MyNugetPackage", new NuGetInstallSettings {
                ExcludeVersion  = true,
                OutputDirectory = "./tools"
                });
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Tools.NuGet.NuGetAliases.NuGetInstallFromConfig(Cake.Core.ICakeContext,Cake.Core.IO.FilePath)">
            <summary>
            Installs NuGet packages using the specified package configuration.
            </summary>
            <param name="context">The context.</param>
            <param name="packageConfigPath">The package configuration to install.</param>
            <example>
            <code>
            NuGetInstall("./tools/packages.config");
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Tools.NuGet.NuGetAliases.NuGetInstallFromConfig(Cake.Core.ICakeContext,Cake.Core.IO.FilePath,Cake.Common.Tools.NuGet.Install.NuGetInstallSettings)">
            <summary>
            Installs NuGet packages using the specified package configuration and settings.
            </summary>
            <param name="context">The context.</param>
            <param name="packageConfigPath">The package configuration to install.</param>
            <param name="settings">The settings.</param>
            <example>
            <code>
            NuGetInstall("./tools/packages.config", new NuGetInstallSettings {
                ExcludeVersion  = true,
                OutputDirectory = "./tools"
                });
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Tools.NuGet.NuGetAliases.NuGetSetApiKey(Cake.Core.ICakeContext,System.String,System.String,Cake.Common.Tools.NuGet.SetApiKey.NuGetSetApiKeySettings)">
            <summary>
            Installs NuGet packages using the specified API key, source and settings.
            </summary>
            <param name="context">The context.</param>
            <param name="apiKey">The API key.</param>
            <param name="source">Server URL where the API key is valid.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Common.Tools.NuGet.NuGetAliases.NuGetSetApiKey(Cake.Core.ICakeContext,System.String,System.String)">
            <summary>
            Installs NuGet packages using the specified API key and source.
            </summary>
            <param name="context">The context.</param>
            <param name="apiKey">The API key.</param>
            <param name="source">Server URL where the API key is valid.</param>
        </member>
        <member name="M:Cake.Common.Tools.NuGet.NuGetAliases.NuGetUpdate(Cake.Core.ICakeContext,Cake.Core.IO.FilePath)">
            <summary>
            Updates NuGet packages.
            </summary>
            <param name="context">The context.</param>
            <param name="targetFile">The target to update.</param>
            <example>
            <code>
            NuGetUpdate("./tools/packages.config");
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Tools.NuGet.NuGetAliases.NuGetUpdate(Cake.Core.ICakeContext,Cake.Core.IO.FilePath,Cake.Common.Tools.NuGet.Update.NuGetUpdateSettings)">
            <summary>
            Updates NuGet packages using the specified settings.
            </summary>
            <param name="context">The context.</param>
            <param name="targetFile">The target to update.</param>
            <param name="settings">The settings.</param>
            <example>
            <code>
            NuGetUpdate("./tools/packages.config", new NuGetUpdateSettings {
                Prerelease = true,
            });
            </code>
            </example>
        </member>
        <member name="T:Cake.Common.Tools.NuGet.Pack.NuGetPacker">
            <summary>
            The NuGet packer.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.NuGet.Pack.NuGetPacker.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,Cake.Core.IO.IProcessRunner,Cake.Core.Diagnostics.ICakeLog,Cake.Core.IO.IToolResolver)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Tools.NuGet.Pack.NuGetPacker"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The environment.</param>
            <param name="processRunner">The process runner.</param>
            <param name="log">The log.</param>
            <param name="nugetToolResolver">The NuGet tool resolver</param>
        </member>
        <member name="M:Cake.Common.Tools.NuGet.Pack.NuGetPacker.Pack(Cake.Core.IO.FilePath,Cake.Common.Tools.NuGet.Pack.NuGetPackSettings)">
            <summary>
            Creates a NuGet package from the specified Nuspec file.
            </summary>
            <param name="nuspecFilePath">The nuspec file path.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Common.Tools.NuGet.Pack.NuGetPacker.GetToolName">
            <summary>
            Gets the name of the tool.
            </summary>
            <returns>The name of the tool.</returns>
        </member>
        <member name="M:Cake.Common.Tools.NuGet.Pack.NuGetPacker.GetDefaultToolPath(Cake.Common.Tools.NuGet.Pack.NuGetPackSettings)">
            <summary>
            Gets the default tool path.
            </summary>
            <param name="settings">The settings.</param>
            <returns>The default tool path.</returns>
        </member>
        <member name="T:Cake.Common.Tools.NuGet.Pack.NuGetPackSettings">
            <summary>
            Contains settings used by <see cref="T:Cake.Common.Tools.NuGet.Pack.NuGetPacker"/>.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Pack.NuGetPackSettings.BasePath">
            <summary>
            Gets or sets the base path.
            </summary>
            <value>The base path.</value>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Pack.NuGetPackSettings.OutputDirectory">
            <summary>
            Gets or sets the output directory.
            </summary>
            <value>The output directory.</value>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Pack.NuGetPackSettings.NoPackageAnalysis">
            <summary>
            Gets or sets a value indicating whether package analysis should be performed.
            Defaults to <c>true</c>.
            </summary>
            <value>
              <c>true</c> if package analysis should be performed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Pack.NuGetPackSettings.Symbols">
            <summary>
            Gets or sets a value indicating whether a symbol package should be created.
            Defaults to <c>false</c>.
            </summary>
            <value>
              <c>true</c> if a symbol package should be created; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Pack.NuGetPackSettings.Id">
            <summary>
            Gets or sets the package ID.
            </summary>
            <value>The package ID.</value>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Pack.NuGetPackSettings.Version">
            <summary>
            Gets or sets the Nuspec version.
            </summary>
            <value>The Nuspec version.</value>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Pack.NuGetPackSettings.Title">
            <summary>
            Gets or sets the package title.
            </summary>
            <value>The package title.</value>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Pack.NuGetPackSettings.Authors">
            <summary>
            Gets or sets the package authors.
            </summary>
            <value>The package authors.</value>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Pack.NuGetPackSettings.Owners">
            <summary>
            Gets or sets the package owners.
            </summary>
            <value>The package owners.</value>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Pack.NuGetPackSettings.Description">
            <summary>
            Gets or sets the package description.
            </summary>
            <value>The package description.</value>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Pack.NuGetPackSettings.Summary">
            <summary>
            Gets or sets the package summary.
            </summary>
            <value>The package summary.</value>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Pack.NuGetPackSettings.ProjectUrl">
            <summary>
            Gets or sets the package project URL.
            </summary>
            <value>The package project URL.</value>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Pack.NuGetPackSettings.IconUrl">
            <summary>
            Gets or sets the package icon URL.
            </summary>
            <value>The package icon URL.</value>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Pack.NuGetPackSettings.LicenseUrl">
            <summary>
            Gets or sets the package license URL.
            </summary>
            <value>The package license URL.</value>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Pack.NuGetPackSettings.Copyright">
            <summary>
            Gets or sets the package copyright.
            </summary>
            <value>The package copyright.</value>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Pack.NuGetPackSettings.ReleaseNotes">
            <summary>
            Gets or sets the package release notes.
            </summary>
            <value>The package release notes.</value>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Pack.NuGetPackSettings.Tags">
            <summary>
            Gets or sets the package tags.
            </summary>
            <value>The package tags.</value>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Pack.NuGetPackSettings.RequireLicenseAcceptance">
            <summary>
            Gets or sets a value indicating whether users has to accept the package license.
            </summary>
            <value>
            <c>true</c> if users has to accept the package license; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Pack.NuGetPackSettings.ToolPath">
            <summary>
            Gets or sets the tool path.
            </summary>
            <value>The tool path.</value>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Pack.NuGetPackSettings.Files">
            <summary>
            Gets or sets the package files.
            </summary>
            <value>The package files.</value>
        </member>
        <member name="T:Cake.Common.Tools.NuGet.Push.NuGetPusher">
            <summary>
            The NuGet package pusher.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.NuGet.Push.NuGetPusher.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,Cake.Core.IO.IProcessRunner,Cake.Core.IO.IToolResolver)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Tools.NuGet.Push.NuGetPusher"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The environment.</param>
            <param name="processRunner">The process runner.</param>
            <param name="nugetToolResolver">The NuGet tool resolver.</param>
        </member>
        <member name="M:Cake.Common.Tools.NuGet.Push.NuGetPusher.Push(Cake.Core.IO.FilePath,Cake.Common.Tools.NuGet.Push.NuGetPushSettings)">
            <summary>
            Pushes a NuGet package to a NuGet server and publishes it.
            </summary>
            <param name="packageFilePath">The package file path.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Common.Tools.NuGet.Push.NuGetPusher.GetToolName">
            <summary>
            Gets the name of the tool.
            </summary>
            <returns>The name of the tool.</returns>
        </member>
        <member name="M:Cake.Common.Tools.NuGet.Push.NuGetPusher.GetDefaultToolPath(Cake.Common.Tools.NuGet.Push.NuGetPushSettings)">
            <summary>
            Gets the default tool path.
            </summary>
            <param name="settings">The settings.</param>
            <returns>The default tool path.</returns>
        </member>
        <member name="T:Cake.Common.Tools.NuGet.Push.NuGetPushSettings">
            <summary>
            Contains settings used by <see cref="T:Cake.Common.Tools.NuGet.Push.NuGetPusher"/>.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Push.NuGetPushSettings.Source">
            <summary>
            Gets or sets  the server URL. If not specified, nuget.org is used unless 
            DefaultPushSource config value is set in the NuGet config file. 
            Starting with NuGet 2.5, if NuGet.exe identifies a UNC/folder source, 
            it will perform the file copy to the source.
            </summary>
            <value>The server URL.</value>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Push.NuGetPushSettings.ApiKey">
            <summary>
            Gets or sets the API key for the server.
            </summary>
            <value>The API key for the server.</value>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Push.NuGetPushSettings.Timeout">
            <summary>
            Gets or sets the timeout for pushing to a server. 
            Defaults to 300 seconds (5 minutes).
            </summary>
            <value>The timeout for pushing to a server.</value>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Push.NuGetPushSettings.Verbosity">
            <summary>
            Gets or sets the verbosity.
            </summary>
            <value>The verbosity.</value>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Push.NuGetPushSettings.ConfigFile">
            <summary>
            Gets or sets the NuGet configuration file.
            </summary>
            <value>The NuGet configuration file.</value>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Push.NuGetPushSettings.ToolPath">
            <summary>
            Gets or sets the tool path.
            </summary>
            <value>The tool path.</value>
        </member>
        <member name="T:Cake.Common.Tools.NuGet.Restore.NuGetRestorer">
            <summary>
            The NuGet package restorer used to restore solution packages.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.NuGet.Restore.NuGetRestorer.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,Cake.Core.IO.IProcessRunner,Cake.Core.IO.IToolResolver)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Tools.NuGet.Restore.NuGetRestorer"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The environment.</param>
            <param name="processRunner">The process runner.</param>
            <param name="nugetToolResolver">The NuGet tool resolver</param>
        </member>
        <member name="M:Cake.Common.Tools.NuGet.Restore.NuGetRestorer.Restore(Cake.Core.IO.FilePath,Cake.Common.Tools.NuGet.Restore.NuGetRestoreSettings)">
            <summary>
            Restores NuGet packages using the specified settings.
            </summary>
            <param name="targetFilePath">The target file path.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Common.Tools.NuGet.Restore.NuGetRestorer.GetToolName">
            <summary>
            Gets the name of the tool.
            </summary>
            <returns>The name of the tool.</returns>
        </member>
        <member name="M:Cake.Common.Tools.NuGet.Restore.NuGetRestorer.GetDefaultToolPath(Cake.Common.Tools.NuGet.Restore.NuGetRestoreSettings)">
            <summary>
            Gets the default tool path.
            </summary>
            <param name="settings">The settings.</param>
            <returns>The default tool path.</returns>
        </member>
        <member name="T:Cake.Common.Tools.NuGet.Restore.NuGetRestoreSettings">
            <summary>
            Contains settings used by <see cref="T:Cake.Common.Tools.NuGet.Restore.NuGetRestorer"/>.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Restore.NuGetRestoreSettings.ToolPath">
            <summary>
            Gets or sets the path to <c>nuget.exe</c>.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Restore.NuGetRestoreSettings.RequireConsent">
            <summary>
            Gets or sets a value indicating whether package restore consent is granted before installing a package.
            </summary>
            <value>
              <c>true</c> if package restore consent is granted; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Restore.NuGetRestoreSettings.PackagesDirectory">
            <summary>
            Gets or sets the packages folder.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Restore.NuGetRestoreSettings.Source">
            <summary>
            Gets or sets a list of packages sources to use for this command.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Restore.NuGetRestoreSettings.NoCache">
            <summary>
            Gets or sets a value indicating whether or not to use the machine cache as the first package source.
            </summary>
            <value>
              <c>true</c> to not use the machine cache as the first package source; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Restore.NuGetRestoreSettings.DisableParallelProcessing">
            <summary>
            Gets or sets a value indicating whether or not to disable parallel processing of packages for this command.
            </summary>
            <value>
            <c>true</c> to disable parallel processing; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Restore.NuGetRestoreSettings.Verbosity">
            <summary>
            Gets or sets the amount of output details.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Restore.NuGetRestoreSettings.ConfigFile">
            <summary>
            Gets or sets the NuGet configuration file. 
            If not specified, the file <c>%AppData%\NuGet\NuGet.config</c> is used as the configuration file.
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.NuGet.NuGetVerbosity">
            <summary>
            Represents NuGet verbosity.
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.NuGet.NuGetVerbosity.Normal">
            <summary>
            Verbosity: <c>Normal</c>
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.NuGet.NuGetVerbosity.Quiet">
            <summary>
            Verbosity: <c>Quiet</c>
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.NuGet.NuGetVerbosity.Detailed">
            <summary>
            Verbosity: <c>Detailed</c>
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.NuGet.Update.NuGetUpdater">
            <summary>
            The NuGet package updater.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.NuGet.Update.NuGetUpdater.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,Cake.Core.IO.IProcessRunner,Cake.Core.IO.IToolResolver)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Tools.NuGet.Update.NuGetUpdater"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The environment.</param>
            <param name="processRunner">The process runner.</param>
            <param name="nugetToolResolver">The nuget tool resolver.</param>
        </member>
        <member name="M:Cake.Common.Tools.NuGet.Update.NuGetUpdater.Update(Cake.Core.IO.FilePath,Cake.Common.Tools.NuGet.Update.NuGetUpdateSettings)">
            <summary>
            Restores NuGet packages using the specified settings.
            </summary>
            <param name="targetFile">The target file path.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Common.Tools.NuGet.Update.NuGetUpdater.GetToolName">
            <summary>
            Gets the name of the tool.
            </summary>
            <returns>The name of the tool.</returns>
        </member>
        <member name="M:Cake.Common.Tools.NuGet.Update.NuGetUpdater.GetDefaultToolPath(Cake.Common.Tools.NuGet.Update.NuGetUpdateSettings)">
            <summary>
            Gets the default tool path.
            </summary>
            <param name="settings">The settings.</param>
            <returns>The default tool path.</returns>
        </member>
        <member name="T:Cake.Common.Tools.NuGet.Update.NuGetUpdateSettings">
            <summary>
            Contains settings used by <see cref="T:Cake.Common.Tools.NuGet.Update.NuGetUpdater"/>.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Update.NuGetUpdateSettings.ToolPath">
            <summary>
            Gets or sets the path to <c>nuget.exe</c>.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Update.NuGetUpdateSettings.Id">
            <summary>
            Gets or sets the package ids to update.
            </summary>
            <value>The package ids to update.</value>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Update.NuGetUpdateSettings.Source">
            <summary>
            Gets or sets a list of package sources to use for this command.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Update.NuGetUpdateSettings.Safe">
            <summary>
            Gets or sets a value indicating whether to look for updates with the highest
            version available within the same major and minor version as the installed package.
            </summary>
            <value>
              <c>true</c> if safe; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Update.NuGetUpdateSettings.Prerelease">
            <summary>
            Gets or sets a value indicating whether to allow updating to prerelease versions.
            This flag is not required when updating prerelease packages that are already installed.
            </summary>
            <value>
              <c>true</c> to allow updating to prerelease versions; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Update.NuGetUpdateSettings.Verbosity">
            <summary>
            Gets or sets the amount of output details.
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.NUnit.NUnitAliases">
            <summary>
            Contains functionality related to running NUnit unit tests.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.NUnit.NUnitAliases.NUnit(Cake.Core.ICakeContext,System.String)">
            <summary>
            Runs all NUnit unit tests in the assemblies matching the specified pattern.
            </summary>
            <param name="context">The context.</param>
            <param name="pattern">The pattern.</param>
        </member>
        <member name="M:Cake.Common.Tools.NUnit.NUnitAliases.NUnit(Cake.Core.ICakeContext,System.String,Cake.Common.Tools.NUnit.NUnitSettings)">
            <summary>
            Runs all NUnit unit tests in the assemblies matching the specified pattern, 
            using the specified settings.
            </summary>
            <param name="context">The context.</param>
            <param name="pattern">The pattern.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Common.Tools.NUnit.NUnitAliases.NUnit(Cake.Core.ICakeContext,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Runs all NUnit unit tests in the specified assemblies.
            </summary>
            <param name="context">The context.</param>
            <param name="assemblies">The assemblies.</param>
        </member>
        <member name="M:Cake.Common.Tools.NUnit.NUnitAliases.NUnit(Cake.Core.ICakeContext,System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath})">
            <summary>
            Runs all NUnit unit tests in the specified assemblies.
            </summary>
            <param name="context">The context.</param>
            <param name="assemblies">The assemblies.</param>
        </member>
        <member name="M:Cake.Common.Tools.NUnit.NUnitAliases.NUnit(Cake.Core.ICakeContext,System.Collections.Generic.IEnumerable{System.String},Cake.Common.Tools.NUnit.NUnitSettings)">
            <summary>
            Runs all NUnit unit tests in the specified assemblies, 
            using the specified settings.
            </summary>
            <param name="context">The context.</param>
            <param name="assemblies">The assemblies.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Common.Tools.NUnit.NUnitAliases.NUnit(Cake.Core.ICakeContext,System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath},Cake.Common.Tools.NUnit.NUnitSettings)">
            <summary>
            Runs all NUnit unit tests in the specified assemblies, 
            using the specified settings.
            </summary>
            <param name="context">The context.</param>
            <param name="assemblies">The assemblies.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="T:Cake.Common.Tools.NUnit.NUnitRunner">
            <summary>
            The NUnit unit test runner.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.NUnit.NUnitRunner.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,Cake.Core.IO.IGlobber,Cake.Core.IO.IProcessRunner)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Tools.NUnit.NUnitRunner"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The environment.</param>
            <param name="globber">The globber.</param>
            <param name="processRunner">The process runner.</param>
        </member>
        <member name="M:Cake.Common.Tools.NUnit.NUnitRunner.Run(Cake.Core.IO.FilePath,Cake.Common.Tools.NUnit.NUnitSettings)">
            <summary>
            Runs the tests in the specified assembly, using the specified settings.
            </summary>
            <param name="assemblyPath">The assembly path.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Common.Tools.NUnit.NUnitRunner.Run(System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath},Cake.Common.Tools.NUnit.NUnitSettings)">
            <summary>
            Runs the tests in the specified assemblies, using the specified settings.
            </summary>
            <param name="assemblyPaths">The assembly paths.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Common.Tools.NUnit.NUnitRunner.GetToolName">
            <summary>
            Gets the name of the tool.
            </summary>
            <returns>The name of the tool.</returns>
        </member>
        <member name="M:Cake.Common.Tools.NUnit.NUnitRunner.GetDefaultToolPath(Cake.Common.Tools.NUnit.NUnitSettings)">
            <summary>
            Gets the default tool path.
            </summary>
            <param name="settings">The settings.</param>
            <returns>The default tool path.</returns>
        </member>
        <member name="T:Cake.Common.Tools.NUnit.NUnitSettings">
            <summary>
            Contains settings used by <see cref="T:Cake.Common.Tools.NUnit.NUnitRunner"/>.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.NUnit.NUnitSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Tools.NUnit.NUnitSettings"/> class.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.NUnit.NUnitSettings.ToolPath">
            <summary>
            Gets or sets the tool path.
            </summary>
            <value>
            The tool path. Defaults to <c>./tools/**/nunit-console.exe</c>.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.NUnit.NUnitSettings.ResultsFile">
            <summary>
            Gets or sets the name of the XML result file.
            </summary>
            <value>
            The name of the XML result file. Defaults to <c>TestResult.xml</c>.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.NUnit.NUnitSettings.NoResults">
            <summary>
            Gets or sets a value indicating whether to generate the XML result file.
            </summary>
            <value>
              <c>true</c> if the XML result file should be generated; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.NUnit.NUnitSettings.Framework">
            <summary>
            Gets or sets the version of the runtime to be used when executing tests.
            </summary>
            <value>
            The version of the runtime to be used when executing tests.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.NUnit.NUnitSettings.Include">
            <summary>
            Gets or sets the categories to include in a run.
            </summary>
            <value>The categories to include in a run.</value>
        </member>
        <member name="P:Cake.Common.Tools.NUnit.NUnitSettings.Exclude">
            <summary>
            Gets or sets the categories to exclude from a run.
            </summary>
            <value>
            The categories to exclude from a run.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.NUnit.NUnitSettings.Timeout">
            <summary>
            Gets or sets the default timeout to be used for test cases in this run.
            If any test exceeds the timeout value, it is cancelled and reported as an error.
            </summary>
            <value>The default timeout to be used for test cases in this run.</value>
        </member>
        <member name="P:Cake.Common.Tools.NUnit.NUnitSettings.ShadowCopy">
            <summary>
            Gets or sets a value indicating whether tests should be run as a shadow copy.
            Default value is <c>true</c>.
            </summary>
            <value>
              <c>true</c> if tests should be run as a shadow copy; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.NUnit.NUnitSettings.NoThread">
            <summary>
            Gets or sets a value indicating whether the main thread should be used for running tests.
            </summary>
            <value>
              <c>true</c> if the main thread should be used for running tests; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.NUnit.NUnitSettings.NoLogo">
            <summary>
            Gets or sets a value indicating whether to show copyright information at the start of the program.
            </summary>
            <value>
              <c>true</c> if to show copyright information at the start of the program; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.NUnit.NUnitSettings.StopOnError">
            <summary>
            Gets or sets a value indicating whether execution of the test run should terminate 
            immediately on the first test failure or error.
            </summary>
            <value>
              <c>true</c> if execution of the test run should terminate immediately on the first test failure or error; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.NUnit.NUnitSettings.Trace">
            <summary>
            Gets or sets the amount of information that NUnit should write to its internal trace log.
            </summary>
            <value>The amount of information that NUnit should write to its internal trace log.</value>
        </member>
        <member name="P:Cake.Common.Tools.NUnit.NUnitSettings.OutputFile">
            <summary>
            Gets or sets the location that NUnit should write test output.
            </summary>
            <value>The location that NUnit should write test output.</value>
        </member>
        <member name="P:Cake.Common.Tools.NUnit.NUnitSettings.ErrorOutputFile">
            <summary>
            Gets or sets the location that NUnit should write test error output.
            </summary>
            <value>The location that NUnit should write test error output.</value>
        </member>
        <member name="T:Cake.Common.Tools.OctopusDeploy.OctopusDeployAliases">
            <summary>
            Contains functionality for working with Octopus Deploy.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.OctopusDeploy.OctopusDeployAliases.OctoCreateRelease(Cake.Core.ICakeContext,System.String,Cake.Common.Tools.OctopusDeploy.CreateReleaseSettings)">
            <summary>
            Creates a release for the specified Octopus Deploy Project.
            </summary>
            <param name="context">The cake context.</param>
            <param name="projectName">The name of the project.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="T:Cake.Common.Tools.OctopusDeploy.CreateReleaseSettings">
            <summary>
            Contains settings used by <see cref="M:Cake.Common.Tools.OctopusDeploy.OctopusDeployReleaseCreator.CreateRelease(System.String,Cake.Common.Tools.OctopusDeploy.CreateReleaseSettings)"/>.
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.OctopusDeploy.OctopusDeploySettings">
            <summary>
            Contains the common settings used by all commands in <see cref="T:Cake.Common.Tools.OctopusDeploy.OctopusDeployReleaseCreator"/>.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.OctopusDeploy.OctopusDeploySettings.ToolPath">
            <summary>
            Gets or sets the tool path.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.OctopusDeploy.OctopusDeploySettings.Username">
            <summary>
            Gets or sets the username to use when authenticating with the server
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.OctopusDeploy.OctopusDeploySettings.Password">
            <summary>
            Gets or sets the password to use when authenticating with the server
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.OctopusDeploy.OctopusDeploySettings.Server">
            <summary>
            Gets or sets the octopus server url.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.OctopusDeploy.OctopusDeploySettings.ApiKey">
            <summary>
            Gets or sets the user's API key.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.OctopusDeploy.OctopusDeploySettings.ConfigurationFile">
            <summary>
            Gets or sets the text file of default values
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.OctopusDeploy.OctopusDeploySettings.EnableDebugLogging">
            <summary>
            Gets or sets a value indicating whether the enable debug logging flag is set
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.OctopusDeploy.OctopusDeploySettings.IgnoreSslErrors">
            <summary>
            Gets or sets a value indicating whether the ignore SSL errors flag is set
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.OctopusDeploy.OctopusDeploySettings.EnableServiceMessages">
            <summary>
            Gets or sets a value indicating whether the enable service messages flag is set
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.OctopusDeploy.CreateReleaseSettings.ReleaseNumber">
            <summary>
            Gets or sets the release number to use for the new release.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.OctopusDeploy.CreateReleaseSettings.DefaultPackageVersion">
            <summary>
            Gets or sets the default version number of all packages to use the new release.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.OctopusDeploy.CreateReleaseSettings.Packages">
            <summary>
            Gets or sets the version number to use for a package in the release.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.OctopusDeploy.CreateReleaseSettings.PackagesFolder">
            <summary>
            Gets or sets the folder containing NuGet packages.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.OctopusDeploy.CreateReleaseSettings.ReleaseNotes">
            <summary>
            Gets or sets the release notes for the new release.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.OctopusDeploy.CreateReleaseSettings.ReleaseNotesFile">
            <summary>
            Gets or sets the path to a file that contains Release Notes for the new release.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.OctopusDeploy.CreateReleaseSettings.IgnoreExisting">
            <summary>
            Gets or sets a value indicating whether the Ignore Existing flag.
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.OctopusDeploy.OctopusDeployReleaseCreator">
            <summary>
            The Octopus Deploy release creator runner
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.OctopusDeploy.OctopusDeployReleaseCreator.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,Cake.Core.IO.IGlobber,Cake.Core.IO.IProcessRunner)">
            <summary> 
            Initializes a new instance of the <see cref="T:Cake.Common.Tools.OctopusDeploy.OctopusDeployReleaseCreator"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The environment.</param>
            <param name="globber">The globber.</param>
            <param name="processRunner">The process runner.</param>
        </member>
        <member name="M:Cake.Common.Tools.OctopusDeploy.OctopusDeployReleaseCreator.CreateRelease(System.String,Cake.Common.Tools.OctopusDeploy.CreateReleaseSettings)">
            <summary>
            Creates a release for the specified project in OctopusDeploy
            </summary>
            <param name="projectName">The target project name</param>
            <param name="settings">The settings</param>
        </member>
        <member name="M:Cake.Common.Tools.OctopusDeploy.OctopusDeployReleaseCreator.GetToolName">
            <summary>
            Gets the name of the tool.
            </summary>
            <returns>The name of the tool.</returns>
        </member>
        <member name="M:Cake.Common.Tools.OctopusDeploy.OctopusDeployReleaseCreator.GetDefaultToolPath(Cake.Common.Tools.OctopusDeploy.CreateReleaseSettings)">
            <summary>
            Gets the default tool path.
            </summary>
            <param name="settings">The settings.</param>
            <returns>The default tool path.</returns>
        </member>
        <member name="T:Cake.Common.Tools.SignTool.ISignToolResolver">
            <summary>
            Represents a sign tool resolver.
            </summary>
            <remarks>
            This exists only to be able to test the sign tool.
            Do not use this interface since it will be removed.
            </remarks>
        </member>
        <member name="M:Cake.Common.Tools.SignTool.ISignToolResolver.GetPath">
            <summary>
            Resolves the path to the sign tool.
            </summary>
            <returns>The path to the sign tool.</returns>
        </member>
        <member name="T:Cake.Common.Tools.SignTool.SignToolSignAliases">
            <summary>
            Contains functionality related to signing assemblies with PFX certificates.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.SignTool.SignToolSignAliases.Sign(Cake.Core.ICakeContext,System.String,Cake.Common.Tools.SignTool.SignToolSignSettings)">
            <summary>
            Signs the specified assembly.
            </summary>
            <param name="context">The context.</param>
            <param name="assembly">The target assembly.</param>
            <param name="settings">The settings.</param>
            <example>
            <code>
            Task("Sign")
                .IsDependentOn("Clean")
                .IsDependentOn("Restore")
                .IsDependentOn("Build")
                .Does(() =>
            {
                var file = "Core.dll";
                Sign(files, new SignToolSignSettings {
                        TimeStampUri = new Uri("http://timestamp.digicert.com"),
                        CertPath = "digicert.pfx",
                        Password = "TopSecret"
                });
            });
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Tools.SignTool.SignToolSignAliases.Sign(Cake.Core.ICakeContext,Cake.Core.IO.FilePath,Cake.Common.Tools.SignTool.SignToolSignSettings)">
            <summary>
            Signs the specified assembly.
            </summary>
            <param name="context">The context.</param>
            <param name="assembly">The target assembly.</param>
            <param name="settings">The settings.</param>
            <example>
            <code>
            Task("Sign")
                .IsDependentOn("Clean")
                .IsDependentOn("Restore")
                .IsDependentOn("Build")
                .Does(() =>
            {
                var file = new FilePath("Core.dll");
                Sign(files, new SignToolSignSettings {
                        TimeStampUri = new Uri("http://timestamp.digicert.com"),
                        CertPath = "digicert.pfx",
                        Password = "TopSecret"
                });
            });
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Tools.SignTool.SignToolSignAliases.Sign(Cake.Core.ICakeContext,System.Collections.Generic.IEnumerable{System.String},Cake.Common.Tools.SignTool.SignToolSignSettings)">
            <summary>
            Signs the specified assemblies.
            </summary>
            <param name="context">The context.</param>
            <param name="assemblies">The target assembly.</param>
            <param name="settings">The settings.</param>
            <example>
            <code>
            Task("Sign")
                .IsDependentOn("Clean")
                .IsDependentOn("Restore")
                .IsDependentOn("Build")
                .Does(() =>
            {
                var files = new string[] { "Core.dll", "Common.dll" };
                Sign(files, new SignToolSignSettings {
                        TimeStampUri = new Uri("http://timestamp.digicert.com"),
                        CertPath = "digicert.pfx",
                        Password = "TopSecret"
                });
            });
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Tools.SignTool.SignToolSignAliases.Sign(Cake.Core.ICakeContext,System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath},Cake.Common.Tools.SignTool.SignToolSignSettings)">
            <summary>
            Signs the specified assemblies.
            </summary>
            <param name="context">The context.</param>
            <param name="assemblies">The target assembly.</param>
            <param name="settings">The settings.</param>
            <example>
            <code>
            Task("Sign")
                .IsDependentOn("Clean")
                .IsDependentOn("Restore")
                .IsDependentOn("Build")
                .Does(() =>
            {
                var files = GetFiles(solutionDir + "/**/bin/" + configuration + "/**/*.exe");
                Sign(files, new SignToolSignSettings {
                        TimeStampUri = new Uri("http://timestamp.digicert.com"),
                        CertPath = "digicert.pfx",
                        Password = "TopSecret"
                });
            });
            </code>
            </example>
        </member>
        <member name="T:Cake.Common.Tools.SignTool.SignToolSignRunner">
            <summary>
            The SignTool SIGN assembly runner.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.SignTool.SignToolSignRunner.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,Cake.Core.IO.IProcessRunner,Cake.Core.IO.IRegistry)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Tools.SignTool.SignToolSignRunner"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The environment.</param>
            <param name="processRunner">The process runner.</param>
            <param name="registry">The registry.</param>
        </member>
        <member name="M:Cake.Common.Tools.SignTool.SignToolSignRunner.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,Cake.Core.IO.IProcessRunner,Cake.Core.IO.IRegistry,Cake.Common.Tools.SignTool.ISignToolResolver)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Tools.SignTool.SignToolSignRunner"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The environment.</param>
            <param name="processRunner">The process runner.</param>
            <param name="registry">The registry.</param>
            <param name="resolver">The resolver.</param>
        </member>
        <member name="M:Cake.Common.Tools.SignTool.SignToolSignRunner.Run(Cake.Core.IO.FilePath,Cake.Common.Tools.SignTool.SignToolSignSettings)">
            <summary>
            Signs the specified assembly.
            </summary>
            <param name="assemblyPath">The assembly path.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Common.Tools.SignTool.SignToolSignRunner.GetToolName">
            <summary>
            Gets the name of the tool.
            </summary>
            <returns>
            The name of the tool (<c>SignTool SIGN</c>).
            </returns>
        </member>
        <member name="M:Cake.Common.Tools.SignTool.SignToolSignRunner.GetDefaultToolPath(Cake.Common.Tools.SignTool.SignToolSignSettings)">
            <summary>
            Gets the default tool path.
            </summary>
            <param name="settings">The settings.</param>
            <returns>The default tool path.</returns>
        </member>
        <member name="T:Cake.Common.Tools.SignTool.SignToolSignSettings">
            <summary>
            Contains settings used by  <see cref="T:Cake.Common.Tools.SignTool.SignToolSignRunner"/>.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.SignTool.SignToolSignSettings.ToolPath">
            <summary>
            Gets or sets the tool path.
            </summary>
            <value>The tool path.</value>
        </member>
        <member name="P:Cake.Common.Tools.SignTool.SignToolSignSettings.TimeStampUri">
            <summary>
            Gets or sets the timestamp server's URL.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.SignTool.SignToolSignSettings.CertPath">
            <summary>
            Gets or sets the <c>PFX</c> certificate path.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.SignTool.SignToolSignSettings.Password">
            <summary>
            Gets or sets the <c>PFX</c> certificate password.
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.WiX.Architecture">
            <summary>
            The architecture for the package.
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.WiX.Architecture.X64">
            <summary>
            Architecture: <c>x86_64</c>
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.WiX.Architecture.X86">
            <summary>
            Architecture: <c>x86</c>
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.WiX.Architecture.IA64">
            <summary>
            Architecture: <c>Itanium</c>
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.WiX.CandleRunner">
            <summary>
            The WiX Candle runner.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.WiX.CandleRunner.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,Cake.Core.IO.IGlobber,Cake.Core.IO.IProcessRunner)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Tools.WiX.CandleRunner"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The environment.</param>
            <param name="globber">The globber.</param>
            <param name="processRunner">The process runner.</param>
        </member>
        <member name="M:Cake.Common.Tools.WiX.CandleRunner.Run(System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath},Cake.Common.Tools.WiX.CandleSettings)">
            <summary>
            Runs Candle with the specified source files and settings.
            </summary>
            <param name="sourceFiles">The source files (<c>.wxs</c>) to compile.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Common.Tools.WiX.CandleRunner.GetToolName">
            <summary>
            Gets the name of the tool.
            </summary>
            <returns>The name of the tool.</returns>
        </member>
        <member name="M:Cake.Common.Tools.WiX.CandleRunner.GetDefaultToolPath(Cake.Common.Tools.WiX.CandleSettings)">
            <summary>
            Gets the default tool path.
            </summary>
            <param name="settings">The settings.</param>
            <returns>The default tool path.</returns>
        </member>
        <member name="T:Cake.Common.Tools.WiX.CandleSettings">
            <summary>
            Contains settings used by <see cref="T:Cake.Common.Tools.WiX.CandleRunner"/>.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.WiX.CandleSettings.Architecture">
            <summary>
            Gets or sets a value indicating which architecture to build the MSI package for.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.WiX.CandleSettings.Defines">
            <summary>
            Gets or sets the pre processor defines.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.WiX.CandleSettings.Extensions">
            <summary>
            Gets or sets the WiX extensions to use.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.WiX.CandleSettings.FIPS">
            <summary>
            Gets or sets a value indicating whether FIPS compliant algorithms should be used.
            </summary>
            <value>
              <c>true</c> if FIPS compliant algorithms should be used, otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.WiX.CandleSettings.NoLogo">
            <summary>
            Gets or sets a value indicating whether to show the logo information.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.WiX.CandleSettings.OutputDirectory">
            <summary>
            Gets or sets the output directory for the object files.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.WiX.CandleSettings.Pedantic">
            <summary>
            Gets or sets a value indicating whether to show pedantic messages.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.WiX.CandleSettings.ShowSourceTrace">
            <summary>
            Gets or sets a value indicating whether to show source trace for errors, warnings and verbose messages.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.WiX.CandleSettings.Verbose">
            <summary>
            Gets or sets a value indicating whether to show verbose output.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.WiX.CandleSettings.ToolPath">
            <summary>
            Gets or sets the path to <c>Candle.exe</c>.
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.WiX.LightRunner">
            <summary>
            The WiX Light runner.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.WiX.LightRunner.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,Cake.Core.IO.IGlobber,Cake.Core.IO.IProcessRunner)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Tools.WiX.LightRunner"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The Cake environment.</param>
            <param name="globber">The globber.</param>
            <param name="processRunner">The process runner.</param>
        </member>
        <member name="M:Cake.Common.Tools.WiX.LightRunner.Run(System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath},Cake.Common.Tools.WiX.LightSettings)">
            <summary>
            Runs Light with the specified input object files and settings.
            </summary>
            <param name="objectFiles">The object files (<c>.wixobj</c>).</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Common.Tools.WiX.LightRunner.GetToolName">
            <summary>
            Gets the name of the tool.
            </summary>
            <returns>The name of the tool.</returns>
        </member>
        <member name="M:Cake.Common.Tools.WiX.LightRunner.GetDefaultToolPath(Cake.Common.Tools.WiX.LightSettings)">
            <summary>
            Gets the default tool path.
            </summary>
            <param name="settings">The settings.</param>
            <returns>The default tool path.</returns>
        </member>
        <member name="T:Cake.Common.Tools.WiX.LightSettings">
            <summary>
            Contains settings used by the <see cref="T:Cake.Common.Tools.WiX.LightRunner"/>.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.WiX.LightSettings.Defines">
            <summary>
            Gets or sets the defined WiX variables.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.WiX.LightSettings.Extensions">
            <summary>
            Gets or sets the WiX extensions to use.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.WiX.LightSettings.RawArguments">
            <summary>
            Gets or sets raw command line arguments to pass through to the linker.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.WiX.LightSettings.NoLogo">
            <summary>
            Gets or sets a value indicating whether to show the logo information.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.WiX.LightSettings.OutputFile">
            <summary>
            Gets or sets the path to the output file (i.e. the resulting MSI package).
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.WiX.LightSettings.ToolPath">
            <summary>
            Gets or sets the path to <c>Light.exe</c>.
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.WiX.WiXAliases">
            <summary>
            Contains functionality related to running WiX tools.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.WiX.WiXAliases.WiXCandle(Cake.Core.ICakeContext,System.String,Cake.Common.Tools.WiX.CandleSettings)">
            <summary>
            Compiles all <c>.wxs</c> sources matching the specified pattern.
            </summary>
            <param name="context">The context.</param>
            <param name="pattern">The globbing pattern.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Common.Tools.WiX.WiXAliases.WiXCandle(Cake.Core.ICakeContext,System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath},Cake.Common.Tools.WiX.CandleSettings)">
            <summary>
            Compiles all <c>.wxs</c> sources in the provided source files.
            </summary>
            <param name="context">The context.</param>
            <param name="sourceFiles">The source files.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Common.Tools.WiX.WiXAliases.WiXLight(Cake.Core.ICakeContext,System.String,Cake.Common.Tools.WiX.LightSettings)">
            <summary>
            Links all <c>.wixobj</c> files matching the specified pattern.
            </summary>
            <param name="context">The context.</param>
            <param name="pattern">The globbing pattern.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Common.Tools.WiX.WiXAliases.WiXLight(Cake.Core.ICakeContext,System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath},Cake.Common.Tools.WiX.LightSettings)">
            <summary>
            Links all <c>.wixobj</c> files in the provided object files.
            </summary>
            <param name="context">The context.</param>
            <param name="objectFiles">The object files.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="T:Cake.Common.Tools.XUnit.XUnit2Aliases">
            <summary>
            Contains functionality related to running xUnit.net tests.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.XUnit.XUnit2Aliases.XUnit2(Cake.Core.ICakeContext,System.String)">
            <summary>
            Runs all xUnit.net v2 tests in the assemblies matching the specified pattern.
            </summary>
            <param name="context">The context.</param>
            <param name="pattern">The pattern.</param>
        </member>
        <member name="M:Cake.Common.Tools.XUnit.XUnit2Aliases.XUnit2(Cake.Core.ICakeContext,System.String,Cake.Common.Tools.XUnit.XUnit2Settings)">
            <summary>
            Runs all xUnit.net v2 tests in the assemblies matching the specified pattern.
            </summary>
            <param name="context">The context.</param>
            <param name="pattern">The pattern.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Common.Tools.XUnit.XUnit2Aliases.XUnit2(Cake.Core.ICakeContext,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Runs all xUnit.net v2 tests in the specified assemblies.
            </summary>
            <param name="context">The context.</param>
            <param name="assemblies">The assemblies.</param>
        </member>
        <member name="M:Cake.Common.Tools.XUnit.XUnit2Aliases.XUnit2(Cake.Core.ICakeContext,System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath})">
            <summary>
            Runs all xUnit.net tests in the specified assemblies.
            </summary>
            <param name="context">The context.</param>
            <param name="assemblies">The assemblies.</param>
        </member>
        <member name="M:Cake.Common.Tools.XUnit.XUnit2Aliases.XUnit2(Cake.Core.ICakeContext,System.Collections.Generic.IEnumerable{System.String},Cake.Common.Tools.XUnit.XUnit2Settings)">
            <summary>
            Runs all xUnit.net v2 tests in the specified assemblies.
            </summary>
            <param name="context">The context.</param>
            <param name="assemblies">The assemblies.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Common.Tools.XUnit.XUnit2Aliases.XUnit2(Cake.Core.ICakeContext,System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath},Cake.Common.Tools.XUnit.XUnit2Settings)">
            <summary>
            Runs all xUnit.net v2 tests in the specified assemblies.
            </summary>
            <param name="context">The context.</param>
            <param name="assemblies">The assemblies.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="T:Cake.Common.Tools.XUnit.XUnitAliases">
            <summary>
            Contains functionality related to running xUnit.net tests.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.XUnit.XUnitAliases.XUnit(Cake.Core.ICakeContext,System.String)">
            <summary>
            Runs all xUnit.net tests in the assemblies matching the specified pattern.
            </summary>
            <param name="context">The context.</param>
            <param name="pattern">The pattern.</param>
        </member>
        <member name="M:Cake.Common.Tools.XUnit.XUnitAliases.XUnit(Cake.Core.ICakeContext,System.String,Cake.Common.Tools.XUnit.XUnitSettings)">
            <summary>
            Runs all xUnit.net tests in the assemblies matching the specified pattern.
            </summary>
            <param name="context">The context.</param>
            <param name="pattern">The pattern.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Common.Tools.XUnit.XUnitAliases.XUnit(Cake.Core.ICakeContext,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Runs all xUnit.net tests in the specified assemblies.
            </summary>
            <param name="context">The context.</param>
            <param name="assemblies">The assemblies.</param>
        </member>
        <member name="M:Cake.Common.Tools.XUnit.XUnitAliases.XUnit(Cake.Core.ICakeContext,System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath})">
            <summary>
            Runs all xUnit.net tests in the specified assemblies.
            </summary>
            <param name="context">The context.</param>
            <param name="assemblies">The assemblies.</param>
        </member>
        <member name="M:Cake.Common.Tools.XUnit.XUnitAliases.XUnit(Cake.Core.ICakeContext,System.Collections.Generic.IEnumerable{System.String},Cake.Common.Tools.XUnit.XUnitSettings)">
            <summary>
            Runs all xUnit.net tests in the specified assemblies.
            </summary>
            <param name="context">The context.</param>
            <param name="assemblies">The assemblies.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Common.Tools.XUnit.XUnitAliases.XUnit(Cake.Core.ICakeContext,System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath},Cake.Common.Tools.XUnit.XUnitSettings)">
            <summary>
            Runs all xUnit.net tests in the specified assemblies.
            </summary>
            <param name="context">The context.</param>
            <param name="assemblies">The assemblies.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="T:Cake.Common.Tools.XUnit.XUnitSettings">
            <summary>
            Contains settings used by <see cref="T:Cake.Common.Tools.XUnit.XUnitRunner"/>.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.XUnit.XUnitSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Tools.XUnit.XUnitSettings"/> class.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.XUnit.XUnitSettings.ShadowCopy">
            <summary>
            Gets or sets a value indicating whether tests should be run as a shadow copy.
            Default value is <c>true</c>.
            </summary>
            <value>
              <c>true</c> if tests should be run as a shadow copy; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.XUnit.XUnitSettings.OutputDirectory">
            <summary>
            Gets or sets the output directory.
            </summary>
            <value>The output directory.</value>
        </member>
        <member name="P:Cake.Common.Tools.XUnit.XUnitSettings.XmlReport">
            <summary>
            Gets or sets a value indicating whether an XML report should be generated.
            </summary>
            <value>
              <c>true</c> if an XML report should be generated; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.XUnit.XUnitSettings.HtmlReport">
            <summary>
            Gets or sets a value indicating whether an HTML report should be generated.
            </summary>
            <value>
              <c>true</c> if an HTML report should be generated; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.XUnit.XUnitSettings.ToolPath">
            <summary>
            Gets or sets the tool path.
            </summary>
            <value>The tool path.</value>
        </member>
        <member name="P:Cake.Common.Tools.XUnit.XUnitSettings.Silent">
            <summary>
            Gets or sets a value indicating whether or not output running test count.
            </summary>
            <value>
              <c>true</c> if running test count should be outputted; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Cake.Common.Tools.XUnit.XUnitRunner">
            <summary>
            The xUnit.net (v1) test runner.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.XUnit.XUnitRunner.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,Cake.Core.IO.IGlobber,Cake.Core.IO.IProcessRunner)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Tools.XUnit.XUnitRunner"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The environment.</param>
            <param name="globber">The globber.</param>
            <param name="runner">The runner.</param>
        </member>
        <member name="M:Cake.Common.Tools.XUnit.XUnitRunner.Run(Cake.Core.IO.FilePath,Cake.Common.Tools.XUnit.XUnitSettings)">
            <summary>
            Runs the tests in the specified assembly.
            </summary>
            <param name="assemblyPath">The assembly path.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Common.Tools.XUnit.XUnitRunner.GetToolName">
            <summary>
            Gets the name of the tool.
            </summary>
            <returns>The name of the tool.</returns>
        </member>
        <member name="M:Cake.Common.Tools.XUnit.XUnitRunner.GetDefaultToolPath(Cake.Common.Tools.XUnit.XUnitSettings)">
            <summary>
            Gets the default tool path.
            </summary>
            <param name="settings">The settings.</param>
            <returns>The default tool path.</returns>
        </member>
        <member name="T:Cake.Common.Tools.XUnit.XUnit2Runner">
            <summary>
            The xUnit.net v2 test runner.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.XUnit.XUnit2Runner.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,Cake.Core.IO.IGlobber,Cake.Core.IO.IProcessRunner)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Tools.XUnit.XUnit2Runner"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The environment.</param>
            <param name="globber">The globber.</param>
            <param name="runner">The runner.</param>
        </member>
        <member name="M:Cake.Common.Tools.XUnit.XUnit2Runner.Run(Cake.Core.IO.FilePath,Cake.Common.Tools.XUnit.XUnit2Settings)">
            <summary>
            Runs the tests in the specified assembly.
            </summary>
            <param name="assemblyPath">The assembly path.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Common.Tools.XUnit.XUnit2Runner.GetToolName">
            <summary>
            Gets the name of the tool.
            </summary>
            <returns>The name of the tool.</returns>
        </member>
        <member name="M:Cake.Common.Tools.XUnit.XUnit2Runner.GetDefaultToolPath(Cake.Common.Tools.XUnit.XUnit2Settings)">
            <summary>
            Gets the default tool path.
            </summary>
            <param name="settings">The settings.</param>
            <returns>The default tool path.</returns>
        </member>
        <member name="T:Cake.Common.Tools.XUnit.XUnit2Settings">
            <summary>
            Contains settings used by <see cref="T:Cake.Common.Tools.XUnit.XUnit2Runner"/>.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.XUnit.XUnit2Settings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Tools.XUnit.XUnit2Settings"/> class.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.XUnit.XUnit2Settings.ShadowCopy">
            <summary>
            Gets or sets a value indicating whether tests should be run as a shadow copy.
            Default value is <c>true</c>.
            </summary>
            <value>
              <c>true</c> if tests should be run as a shadow copy; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.XUnit.XUnit2Settings.OutputDirectory">
            <summary>
            Gets or sets the output directory.
            </summary>
            <value>The output directory.</value>
        </member>
        <member name="P:Cake.Common.Tools.XUnit.XUnit2Settings.XmlReport">
            <summary>
            Gets or sets a value indicating whether an XML report should be generated.
            </summary>
            <value>
              <c>true</c> if an XML report should be generated; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.XUnit.XUnit2Settings.XmlReportV1">
            <summary>
            Gets or sets a value indicating whether an xUnit.net v1 style XML report should be generated.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.XUnit.XUnit2Settings.HtmlReport">
            <summary>
            Gets or sets a value indicating whether an HTML report should be generated.
            </summary>
            <value>
              <c>true</c> if an HTML report should be generated; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.XUnit.XUnit2Settings.ToolPath">
            <summary>
            Gets or sets the tool path.
            </summary>
            <value>The tool path.</value>
        </member>
        <member name="T:Cake.Common.Xml.XmlTransformation">
            <summary>
            Provides functionality to perform XML transformation
            </summary>
        </member>
        <member name="M:Cake.Common.Xml.XmlTransformation.Transform(System.String,System.String)">
            <summary>
            Performs XML XSL transformation
            </summary>
            <param name="xsl">XML style sheet.</param>
            <param name="xml">XML data.</param>
            <returns>Transformed XML string.</returns>
        </member>
        <member name="M:Cake.Common.Xml.XmlTransformation.Transform(System.String,System.String,Cake.Common.Xml.XmlTransformationSettings)">
            <summary>
            Performs XML XSL transformation
            </summary>
            <param name="xsl">XML style sheet.</param>
            <param name="xml">XML data.</param>
            <param name="settings">Settings for result file xml transformation.</param>
            <returns>Transformed XML string.</returns>
        </member>
        <member name="M:Cake.Common.Xml.XmlTransformation.Transform(Cake.Core.IO.IFileSystem,Cake.Core.IO.FilePath,Cake.Core.IO.FilePath,Cake.Core.IO.FilePath)">
            <summary>
            Performs XML XSL transformation
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="xslPath">Path to xml style sheet.</param>
            <param name="xmlPath">Path xml data.</param>
            <param name="resultPath">Transformation result path.</param>
        </member>
        <member name="M:Cake.Common.Xml.XmlTransformation.Transform(Cake.Core.IO.IFileSystem,Cake.Core.IO.FilePath,Cake.Core.IO.FilePath,Cake.Core.IO.FilePath,Cake.Common.Xml.XmlTransformationSettings)">
            <summary>
            Performs XML XSL transformation
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="xslPath">Path to xml style sheet.</param>
            <param name="xmlPath">Path xml data.</param>
            <param name="resultPath">Transformation result path.</param>
            <param name="settings">Settings for result file xml transformation.</param>
        </member>
        <member name="M:Cake.Common.Xml.XmlTransformation.Transform(System.IO.TextReader,System.IO.TextReader,System.IO.Stream,System.Xml.XmlWriterSettings)">
            <summary>
            Performs XML XSL transformation
            </summary>
            <param name="xsl">XML style sheet.</param>
            <param name="xml">XML data.</param>
            <param name="result">Transformation result.</param>
            <param name="settings">Optional settings for result file xml writer</param>
        </member>
        <member name="M:Cake.Common.Xml.XmlTransformation.Transform(System.Xml.XmlReader,System.Xml.XmlReader,System.Xml.XmlWriter)">
            <summary>
            Performs XML XSL transformation
            </summary>
            <param name="xsl">XML style sheet.</param>
            <param name="xml">XML data.</param>
            <param name="result">Transformation result.</param>
        </member>
        <member name="T:Cake.Common.Xml.XmlTransformationAlias">
            <summary>
            Contains functionality related to XML XSL transformation.
            </summary>
        </member>
        <member name="M:Cake.Common.Xml.XmlTransformationAlias.XmlTransform(Cake.Core.ICakeContext,System.String,System.String)">
            <summary>
            Performs XML XSL transformation
            </summary>
            <param name="context">The context.</param>
            <param name="xsl">XML style sheet.</param>
            <param name="xml">XML data.</param>
            <returns>Transformed XML string.</returns>
        </member>
        <member name="M:Cake.Common.Xml.XmlTransformationAlias.XmlTransform(Cake.Core.ICakeContext,System.String,System.String,Cake.Common.Xml.XmlTransformationSettings)">
            <summary>
            Performs XML XSL transformation
            </summary>
            <param name="context">The context.</param>
            <param name="xsl">XML style sheet.</param>
            <param name="xml">XML data.</param>
            <param name="settings">Optional settings for result file xml writer</param>
            <returns>Transformed XML string.</returns>
        </member>
        <member name="M:Cake.Common.Xml.XmlTransformationAlias.XmlTransform(Cake.Core.ICakeContext,Cake.Core.IO.FilePath,Cake.Core.IO.FilePath,Cake.Core.IO.FilePath)">
            <summary>
            Performs XML XSL transformation
            </summary>
            <param name="context">The context.</param>
            <param name="xslPath">Path to xml style sheet.</param>
            <param name="xmlPath">Path xml data.</param>
            <param name="resultPath">Transformation result path, will overwrite if exists.</param>
        </member>
        <member name="M:Cake.Common.Xml.XmlTransformationAlias.XmlTransform(Cake.Core.ICakeContext,Cake.Core.IO.FilePath,Cake.Core.IO.FilePath,Cake.Core.IO.FilePath,Cake.Common.Xml.XmlTransformationSettings)">
            <summary>
            Performs XML XSL transformation
            </summary>
            <param name="context">The context.</param>
            <param name="xslPath">Path to xml style sheet.</param>
            <param name="xmlPath">Path xml data.</param>
            <param name="resultPath">Transformation result path.</param>
            <param name="settings">Optional settings for result file xml writer</param>
        </member>
        <member name="T:Cake.Common.Xml.XmlTransformationSettings">
            <summary>
            Contains settings for <see cref="T:Cake.Common.Xml.XmlTransformation"/>
            </summary>
        </member>
        <member name="M:Cake.Common.Xml.XmlTransformationSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Xml.XmlTransformationSettings"/> class.
            </summary>
        </member>
        <member name="P:Cake.Common.Xml.XmlTransformationSettings.Overwrite">
            <summary>
            Gets or sets a value indicating whether overwriting existing file is permitted
            </summary>
        </member>
        <member name="P:Cake.Common.Xml.XmlTransformationSettings.CheckCharacters">
            <summary>
            Gets or sets a value indicating whether the XML writer should check to ensure that all characters in the document conform to the "2.2 Characters" section of the W3C XML 1.0 Recommendation.
            </summary>
        </member>
        <member name="P:Cake.Common.Xml.XmlTransformationSettings.ConformanceLevel">
            <summary>
            Gets or sets a value indicating level of conformance that the XmlWriter checks the XML output for.
            </summary>
        </member>
        <member name="P:Cake.Common.Xml.XmlTransformationSettings.DoNotEscapeUriAttributes">
            <summary>
            Gets or sets a value indicating whether the XmlWriter does not escape URI attributes.
            </summary>
        </member>
        <member name="P:Cake.Common.Xml.XmlTransformationSettings.Encoding">
            <summary>
            Gets or sets the type of text encoding to use.
            </summary>
        </member>
        <member name="P:Cake.Common.Xml.XmlTransformationSettings.Indent">
            <summary>
            Gets or sets a value indicating whether to indent elements.
            </summary>
        </member>
        <member name="P:Cake.Common.Xml.XmlTransformationSettings.IndentChars">
            <summary>
            Gets or sets the character string to use when indenting. This setting is used when the Indent property is set to true.
            </summary>
        </member>
        <member name="P:Cake.Common.Xml.XmlTransformationSettings.NamespaceHandling">
            <summary>
            Gets or sets a value that indicates whether the XmlWriter should remove duplicate namespace declarations when writing XML content. The default behavior is for the writer to output all namespace declarations that are present in the writer's namespace resolver.
            </summary>
        </member>
        <member name="P:Cake.Common.Xml.XmlTransformationSettings.NewLineChars">
            <summary>
            Gets or sets the character string to use for line breaks.
            </summary>
        </member>
        <member name="P:Cake.Common.Xml.XmlTransformationSettings.NewLineHandling">
            <summary>
            Gets or sets a value indicating whether to normalize line breaks in the output.
            </summary>
        </member>
        <member name="P:Cake.Common.Xml.XmlTransformationSettings.NewLineOnAttributes">
            <summary>
            Gets or sets a value indicating whether to write attributes on a new line.
            </summary>
        </member>
        <member name="P:Cake.Common.Xml.XmlTransformationSettings.OmitXmlDeclaration">
            <summary>
            Gets or sets a value indicating whether to omit an XML declaration.
            </summary>
        </member>
        <member name="P:Cake.Common.Xml.XmlTransformationSettings.WriteEndDocumentOnClose">
            <summary>
            Gets or sets a value indicating whether the XmlWriter will add closing tags to all unclosed element tags when the Close method is called
            </summary>
        </member>
    </members>
</doc>
